./models/content_parser.py
<code>
import json
import re
from src.services.logger import logger

class ContentParser:
    def parse_json(self, raw_text):
        # Attempt to clean the input from Markdown code fences and other extraneous formatting.
        cleaned = self._strip_code_fences(raw_text)

        # Attempt direct parsing
        data = self._try_parse_json(cleaned)
        if data is not None:
            return data

        # If direct parsing fails, try extracting a likely JSON object
        extracted = self._extract_json_object(cleaned)
        if extracted:
            data = self._try_parse_json(extracted)
            if data is not None:
                return data

        # If still no success, log and return None
        logger.error(f"Failed to parse JSON after extraction attempts.\nOriginal Data:\n{raw_text}")
        return None

    def _strip_code_fences(self, text):
        # Remove ```json ... ``` and ``` ... ```
        pattern = r"```(?:json)?\s*(.*?)\s*```"
        cleaned = re.sub(pattern, r"\1", text, flags=re.DOTALL|re.IGNORECASE)
        return cleaned.strip()

    def _try_parse_json(self, text):
        try:
            return json.loads(text)
        except json.JSONDecodeError as e:
            logger.debug(f"JSON decode attempt failed: {e}")
            return None

    def _extract_json_object(self, text):
        # Attempt to find the first balanced { ... } section
        start = text.find('{')
        end = text.rfind('}')
        if start != -1 and end != -1 and start < end:
            candidate = text[start:end+1].strip()
            return candidate
        return None
</code>

./models/__init__.py
<code>
</code>

./models/state.py
<code>
class AppState:
    def __init__(self):
        self.selected_category = None
        self.selected_type = None
        self.num_results = 3
        self.contexts = []
        self.min_level = 1
        self.max_level = 3
        self.regenerate_name_only = False
        self.lock_name = False
        self.last_results = []
        self.detail_display_mode = "Plain Text"
        self.campaign_prompt = ""
        self.system = ""
        self.setting = ""
</code>

./utils.py
<code>
import json

def load_config(self, path='src/config/config.json'):
    with open(path, "r") as f:
        return json.load(f)</code>

./config/__init__.py
<code>
</code>

./config/config.json
<code>
{
  "gpt-api": {
    "api-key": "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"
  },
  "app-settings": {
    "max-tokens": 4000,
    "n-results": 1,
    "temperature": 0.27,
    "models":  [
        "gpt-4o",
        "o1-preview",
        "o1-mini"
    ],
    "llm_retry_count": 3,
    "llm_retry_delay": 2
  },
  "schema-validation": {
    "enable": true,
    "schema_prompt_template": "You are a D&D 3.5e content generator. Provide a JSON schema that strictly describes the structure of {content_type} objects influenced by {context}, including required fields: 'name' (string), 'description' (string), and any other necessary attributes. The schema must be strictly valid JSON Schema (draft-07 or later) with a single top-level object.",
    "default_schema": "./src/resources/default_schema.json"
  },
  "ui": {
    "category_placeholder": "Select a Category...",
    "type_placeholder": "Select a Type...",
    "context_instructions": "Check any contexts that apply:",
    "options_tooltips": {
      "num_results": "Number of items to generate.",
      "min_level": "Minimum level of the party or challenge.",
      "max_level": "Maximum level of the party or challenge.",
      "regen_name_only": "If checked, regeneration only changes the name, preserving other attributes.",
      "lock_name": "If checked, the name is locked and will not change on regeneration."
    },
    "more_info_dialog_title": "Detailed Statblock"
  },
  "log-directories": {
    "weapons": "./logs/weapons/",
    "npcs": "./logs/npcs/",
    "potions": "./logs/potions/",
    "armor": "./logs/armor/",
    "locations": "./logs/locations/"
  },
  "default_categories_file": "src/resources/dnd_categories.json",
  "default_contexts_file": "src/resources/dnd_contexts.json",
  "default_system": "D&D 3.5e",
  "default_setting": "Faerun"
}
</code>

./resources/dnd_contexts.json
<code>
{
  "General Contexts": {
    "Dark & Mystical": {
      "Darkness & Gloom": [
        "Dark", "Gothic", "Haunted", "Shrouded", "Cursed"
      ],
      "Eldritch & Esoteric": [
        "Eldritch", "Esoteric", "Primordial", "Ethereal", "Enchanted"
      ]
    },
    "Magical & Spiritual": {
      "Arcane & Divine": [
        "Magic", "Divine", "Arcane", "Mythic", "Chivalric"
      ],
      "Ritual & Nature Faiths": [
        "Ritualistic", "Shamanistic", "Monastic", "Pagan", "Druidic"
      ]
    },
    "Technological & Alternative": {
      "Industrial & Punks": [
        "Industrial", "Steampunk", "Clockpunk", "Dieselpunk"
      ],
      "Futuristic & Mechanized": [
        "Atompunk", "Solarpunk", "Cyberpunk", "Mechanical"
      ]
    },
    "Historic & Fantastic": {
      "Historic & Cultural": [
        "Mundane", "Light", "Pastoral", "Heroic", "Nomadic", "Enlightened"
      ],
      "Mythic & Otherworldly": [
        "Ancient", "Wondrous", "Celestial", "Underworld"
      ]
    },
    "Emotional & Atmospheric": {
      "Emotional Tones": [
        "Chaotic", "Jubilant", "Mysterious", "Sorrowful", "Blessed"
      ],
      "Societal & Conceptual": [
        "Haunted", "Mercantile", "Militaristic", "Arcadian", "Philosophical"
      ]
    }
  },
  "Geographic Contexts": {
    "Aquatic & Coastal": {
      "Marine Environments": [
        "Nautical", "Coral Reef", "Kelp Forest"
      ],
      "Islands & Marshes": [
        "Floating Archipelago", "Islandic", "Harbor", "Shimmering Marsh"
      ]
    },
    "Urban & Civilized": {
      "Settlements & Markets": [
        "Urban", "Trading Post", "Market", "Bazaar"
      ],
      "Ruin & Overgrowth": [
        "Ruined City", "Overgrown Ruins"
      ],
      "Inland Seas & Shores": [
        "Inland Sea (settled shores)"
      ]
    },
    "Wild & Natural": {
      "Forests & Jungles": [
        "Wilds", "Jungle", "Rainforest", "Fjord"
      ],
      "Plains & Savannah": [
        "Savannah", "Grassland", "Steppe"
      ],
      "Archipelagos & Highlands": [
        "Archipelago", "Highlands"
      ]
    },
    "Cold & Icy": {
      "Arctic Landscapes": [
        "Arctic", "Glacier", "Tundra", "Icy Waste", "Boreal Forest"
      ]
    },
    "Arid & Desert": {
      "Deserts & Barren Lands": [
        "Desert", "Badlands", "Oasis", "Salt Flat", "Mirage Plains"
      ]
    },
    "Mountainous & Rugged": {
      "High Terrain": [
        "Mountainous", "Canyon", "Plateau", "Mesa"
      ],
      "Volcanic & Geothermal": [
        "Crater Lake", "Foothills", "Volcanic Isle", "Geysers"
      ]
    },
    "Wetlands & Swamps": {
      "Moist Environments": [
        "Swamp", "Marshland", "Bog", "Mangrove", "Floodplain"
      ]
    }
  },
  "Thematic Contexts": {
    "Historic & Ancient": {
      "Ancient Civilizations": [
        "Ancient", "Mythological", "Archaic", "Mosaic Culture"
      ],
      "Lost Realms": [
        "Lost World"
      ]
    },
    "Moral Alignments & Faith": [
      "Evil", "Holy", "Zealous", "Ritual Ceremony", "Prophetic"
    ],
    "Scenario & Setting Themes": {
      "Adventure & Time": [
        "Pirate-themed", "Futuristic", "Arcane Academy", "Surreal", "Time-Travel"
      ],
      "Fantastical Gatherings": [
        "Fey Carnival", "Utopian", "Dystopian"
      ]
    },
    "Conflict & Strife": [
      "Warlike", "Invasion", "Corrupted", "Revolutionary", "Conspiracy",
      "Under Siege", "Coup", "Raid"
    ],
    "Cultural & Mythic": [
      "Folkloric", "Tribal", "Esoteric Cult", "Bardic College", "Crusading",
      "Hallucinatory", "Astral", "Celestial", "Feral", "Chthonic"
    ]
  },
  "Cultural Contexts": {
    "European-Influenced": [
      "European-inspired", "Norse-inspired", "Celtic-inspired", "Greek-inspired",
      "Roman-inspired", "Slavic-inspired", "Byzantine-inspired"
    ],
    "Asian-Influenced": [
      "Asian-inspired", "Chinese-inspired", "Japanese-inspired", "Korean-inspired",
      "Indian-inspired", "Thai-inspired", "Mongolian-inspired"
    ],
    "Middle Eastern & African": [
      "Egyptian-inspired", "Persian-inspired", "Arabian-inspired", "Berber-inspired",
      "Ethiopian-inspired", "West African-inspired", "Yoruba-inspired", "Maasai-inspired"
    ],
    "Indigenous & American": [
      "Mesoamerican-inspired", "Mayan-inspired", "Incan-inspired", "Aztec-inspired",
      "Native American-inspired", "Caribbean-inspired"
    ],
    "Other World Cultures": [
      "Polynesian-inspired", "Maori-inspired", "Phoenician-inspired", "Babylonian-inspired",
      "Hebrew-inspired", "Hittite-inspired", "Aboriginal Australian-inspired"
    ]
  }
}
</code>

./resources/default_schema.json
<code>
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RPG Content Schema",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "The name of the generated content item.",
      "ui_order": 1
    },
    "description": {
      "type": "string",
      "description": "A descriptive text for the generated content.",
      "ui_order": 2
    }
  },
  "required": ["name", "description"],
  "additionalProperties": true
}
</code>

./resources/starwars_contexts.json
<code>
{
  "Galactic Eras & Historical Layers": {
    "Ancient & Pre-Foundational Eras": [
      "Early Builder Cultures", "Proto-Spiritual Societies", "Archaic Artifact Traditions", "Ancestral Cosmology Beliefs", "Pre-Contact Trade Routes"
    ],
    "Golden Age of Prosperity": [
      "Diplomatic Flourishing", "Centers of Learning", "Interstellar Cultural Unity", "Harmonious Alliances", "Frontier Exploration Periods"
    ],
    "Complex Republic Stages": [
      "Intricate Governance Systems", "Centralized Advisory Councils", "Regional Autonomy Movements", "Cultural Etiquette Codes", "Stable but Fragmented Orders"
    ],
    "Authoritarian & Restrictive Eras": [
      "Imperial Control Measures", "Alienation Policies", "Propaganda Campaigns", "Widespread Surveillance Models", "Fear-Based Social Structures"
    ],
    "Reconstruction & Renewal Phases": [
      "Refugee Integration Efforts", "Restorative Conferences", "Cultural Revival Projects", "Rebuilding of Trade Networks", "Diverse Peace Councils"
    ],
    "Federation & Neo-Union Periods": [
      "Inter-Faith Dialogues", "Participatory Governance Systems", "Ecosystem Restoration Programs", "Cybernetic Integration Reforms", "Knowledge-Sharing Agreements"
    ]
  },
  "Force & Spiritual Contexts": {
    "Dualistic & Balanced Perspectives": [
      "Balance-Oriented Thinkers", "Moderate Spiritual Philosophies", "Harmonic Meditation Traditions", "Force-Agnostic Scholars", "Adaptable Ethical Systems"
    ],
    "Mystical & Elemental Belief Systems": [
      "Naturalistic Force Users", "Cosmic Whisper Interpreters", "Element-Linked Mystics", "Star-Watcher Visionaries", "Ancient Spiritual Guides"
    ],
    "Non-Force Religious Expressions": [
      "Solar Worship Clerics", "Ancestral Veneration Rituals", "Star-Chart Based Faiths", "Totemic Spirit Belief Groups", "Symbol-Focused Priesthoods"
    ],
    "Esoteric & Hidden Sects": [
      "Secret-Knowledge Keepers", "Oracle-Focused Societies", "Crystal-Using Ascetics", "Prophecy Interpretation Circles", "Veiled Ritual Communities"
    ],
    "Secular & Materialist Worldviews": [
      "Rationalist Philosophers", "Empirical Knowledge Seekers", "Data-Oriented Historians", "Pragmatic Realists", "Functionalist Ethical Debaters"
    ]
  },
  "Political & Ideological Currents": {
    "Cosmopolitan & Core-Centric Thought": [
      "Multi-Species Integration Ideas", "Cultural Exchange Initiatives", "Wealth Redistribution Debates", "Inclusive Civic Fairs", "Artistic Political Groups"
    ],
    "Autonomy & Decentralization Trends": [
      "Local Independence Movements", "Anti-Central Exploitation Narratives", "Resource Equity Discussions", "Community Self-Governance Councils", "Inter-Regional Solidarity Networks"
    ],
    "Corporate & Economic Influence": [
      "Profit-Driven Governance Models", "Trade Restrictions & Debates", "Technocratic Planning Concepts", "Monopoly vs. Market Freedom Exchanges", "Corporate-Lobby Advocacy"
    ],
    "Militaristic & Authoritarian Ideals": [
      "Security-Focused Parties", "Patriotic Loyalty Cults", "Strict Law Enforcement Theories", "Xenophobic Defense Rhetoric", "Paramilitary Doctrine Schools"
    ],
    "Frontier & Libertarian Perspectives": [
      "Minimalist Governance Ideals", "Independent Trade Guild Legacies", "Informal Freeport Agreements", "Egalitarian Settlement Visions", "Unregulated Border Communities"
    ]
  },
  "Cultural & Artistic Dimensions": {
    "Performance & Media Traditions": [
      "Holo-Drama Presentations", "Interactive Storytelling Forms", "Sensory-Enhanced Music Styles", "Avant-Garde Performance Art", "Participatory Theater Gatherings"
    ],
    "Aesthetic & Design Influences": [
      "Minimalist Architectural Themes", "Biomorphic Art Inspirations", "Audio-Visual Installations", "Colorful Tapestry Methods", "Illumination-Based Festivals"
    ],
    "Oral & Mythic Narratives": [
      "Origin Story Recitations", "Folk Legend Retellings", "Nomadic Story Circles", "Epics of Migration", "Ancestral Wisdom Exchanges"
    ],
    "Cultural Synthesis Movements": [
      "Fusion Cuisine Workshops", "Dialect Blending Sessions", "Hybrid Fashion Trends", "Cultural Remix Gatherings", "Cross-Planet Artistic Collaborations"
    ],
    "Revivalist & Traditionalist Arts": [
      "Historic Performance Revivals", "Classic Architectural Conventions", "Folk Song Preservation", "Handicraft Renaissance", "Tribal Symbolic Art"
    ]
  },
  "Technological & Industrial Contexts": {
    "Exploration & Navigation Ideals": [
      "Innovative Hyperlane Mapping", "Pioneer Cartography Thinkers", "Quantum Compass Debates", "Stellar Route Challenges", "Frontier Exploration Clubs"
    ],
    "Industrial & Mechanized Philosophies": [
      "Factory Efficiency Discussions", "Droid Labor Ethics Dialogues", "Mass Production Debates", "Urbanization and Retrofitting Concepts", "Machine Integration Rituals"
    ],
    "Sustainability & Eco-Tech": [
      "Green Technology Alliances", "Terraforming Ethics Panels", "Zero-Emission Engineering", "Eco-Station Standards", "Renewable Resource Circles"
    ],
    "Anti-Tech & Primitivist Movements": [
      "Device-Free Communes", "Data Purging Rituals", "Tool-Limiting Societies", "Manual Craft Revivalists", "Vintage Mechanism Enthusiasts"
    ],
    "Cyborg & Augmentation Perspectives": [
      "Bio-Mechanical Aesthetic Trends", "Cyber-Integration Debates", "Neural Enhancement Philosophies", "Cortical Sharing Practices", "Equal Access Cybernetics"
    ]
  },
  "Geographic & Environmental Themes": {
    "Aquatic & Marine Cultures": [
      "Undersea Harvest Ceremonies", "Coral Reef Reverence", "Tidal Cycle Rituals", "Oceanic Song Traditions", "Mariner Lore Exchanges"
    ],
    "Arid & Desert Adaptations": [
      "Oasis Celebration Practices", "Sandstorm Survival Beliefs", "Solar Cycle Observances", "Dune Dweller Etiquettes", "Buried Relic Mythologies"
    ],
    "Urban & Megastructure Environments": [
      "Neon District Celebrations", "Skybridge Social Gatherings", "Vertical Farm Innovations", "Layered City Identity Debates", "Holo-Advertisement Critiques"
    ],
    "Highland & Mountain Traditions": [
      "Cliffside Community Fealties", "Peak Meditation Ceremonies", "Observatory Ritual Gatherings", "Avalanche Warning Customs", "Thermal Spring Healing"
    ],
    "Forest & Jungle Perspectives": [
      "Bioluminescent Market Nights", "Spore Harvest Festivals", "Root Council Assemblies", "Tree-Sage Consultations", "Moss-Infused Treatments"
    ],
    "Polar & Icy Practices": [
      "Aurora-Watching Gatherings", "Glacial Temple Songs", "Fur-Layered Hospitality Codes", "Snow Art Ceremonies", "Seasonal Melting Traditions"
    ],
    "Aerial & Floating Settlements": [
      "Cloud City Rituals", "Wind Chime Negotiations", "Zeppelin Herding Customs", "Airborne Trade Conventions", "Atmospheric Harvest Practices"
    ]
  },
  "Economic & Trade Contexts": {
    "Spice & Luxury Commodities": [
      "Flavorful Trade Celebrations", "High-Value Resource Exchanges", "Rare Goods Folklore", "Narcotic Regulation Debates", "Inflation Narratives"
    ],
    "Market & Commerce Ideologies": [
      "Fair Trade Philosophies", "Price Stability Dialogues", "Unionized Resource Management", "Anti-Gouging Policies", "Open Market Festivals"
    ],
    "Illicit & Underground Economies": [
      "Secretive Exchange Customs", "Contraband Whisper Networks", "Hidden Auction Traditions", "Moral Ambiguity Debates", "Covert Trade Signals"
    ],
    "Banking & Financial Systems": [
      "Loan Forgiveness Talks", "Credit Allocation Rituals", "Wealth Distribution Ceremonies", "Hedging Strategy Debates", "Currency Value Philosophies"
    ],
    "Agricultural & Resource Ethics": [
      "Crop Blessing Rites", "Shared Storage Customs", "Seed Exchange Gatherings", "Mineral Ownership Debates", "Land Stewardship Concepts"
    ]
  },
  "Social Structures & Class Systems": {
    "Clan & Kinship Models": [
      "Totemic Ancestry Celebrations", "Seasonal Family Reunions", "Name-Inheritance Customs", "Clan-Bond Affirmations", "Collective Story Swaps"
    ],
    "Nobility & Aristocratic Codes": [
      "Formal Courtship Protocols", "Lineage Documentation Traditions", "Heraldic Symbol Debates", "Tea Ceremony Etiquettes", "Estate Inheritance Customs"
    ],
    "Guilds & Artisan Networks": [
      "Apprenticeship Completion Rituals", "Masterpiece Presentation Ceremonies", "Material Source Respect", "Craft Rivalry Challenges", "Shared Workshop Etiquette"
    ],
    "Underclass & Marginalized Groups": [
      "Street Corner Networking", "Graffiti Message Exchanges", "Informal Credit Systems", "Mutual Aid Alliances", "Subterranean Gathering Spots"
    ],
    "Caste & Hierarchical Systems": [
      "Occupation-Restricted Roles", "Caste Transgression Myths", "Taboo-Breaking Legends", "Lineage Purity Debates", "Insular Ritual Codes"
    ]
  },
  "Conflict & War Contexts": {
    "Long-Running Disputes & Feuds": [
      "Generational Grudge Stories", "Truce Anniversary Observances", "Reconciliation Attempts", "Legacy Weapon Exhibitions", "Inter-Group Tribute Exchanges"
    ],
    "Mercenary & Private Warfare": [
      "Honor-Based Contracts", "Challenge Token Exchanges", "Loot Distribution Customs", "Skill-Showcasing Rituals", "Survival Code Debates"
    ],
    "Guerrilla & Resistance Tactics": [
      "Secret Campfire Meetings", "Hidden Symbol Languages", "Covert Aid Networks", "Coded Warning Songs", "Disguise and Camouflage Traditions"
    ],
    "Wartime Diplomacy & Negotiation": [
      "Flag of Truce Protocols", "Neutral Ground Feasts", "Shared Medicine Exchanges", "Conflict Arbitration Councils", "Armistice Ritual Talks"
    ],
    "Post-Conflict Healing & Memory": [
      "Monument Dedication Ceremonies", "Ash Clearing Rituals", "Orphan Integration Efforts", "Cross-Faction Comfort Groups", "Historic Site Renewal"
    ]
  },
  "Inter-species & Inter-cultural Contexts": {
    "Linguistic & Communication Fusion": [
      "Loanword Celebrations", "Polyglot Teaching Circles", "Script Combination Debates", "Holo-Translator Festivals", "Symbolic Language Exchanges"
    ],
    "Culinary & Dietary Blends": [
      "Multi-Cuisine Gatherings", "Flavor Exchange Tasting", "Foraged Ingredient Challenges", "Interstellar Recipe Swaps", "Culinary Tradition Mixes"
    ],
    "Shared Religious & Ritual Practices": [
      "Composite Temple Structures", "Inter-Faith Dialogues", "Dual-Inheritance Shrines", "Joint Pilgrim Routes", "Unified Seasonal Offerings"
    ],
    "Artistic & Cultural Collaborations": [
      "Joint Mural Projects", "Co-Hosted Musical Events", "Interstellar Dance Companies", "Architecture Exchange Programs", "Bi-Cultural Sculpture Gardens"
    ],
    "Ethical & Integration Debates": [
      "Taboo Reconstruction Dialogues", "Refuge Inclusion Conversations", "Memory Preservation Panels", "Fair Representation Treaties", "Cultural Accommodation Studies"
    ]
  },
  "Intellectual & Philosophical Contexts": {
    "Knowledge & Epistemology": [
      "Universal Learning Theories", "Causality Symposiums", "Archive Preservation Policies", "Fact vs. Narrative Discussions", "Axiom-Formulation Clubs"
    ],
    "Moral & Ethical Discourse": [
      "Compassion Maximization Challenges", "Harm Reduction Debates", "Value Exchange Philosophies", "Neutral Observer Councils", "Guilt and Redemption Dialogues"
    ],
    "Aesthetics & Beauty Concepts": [
      "Art Critique Forums", "Natural Phenomena Appreciation", "Form vs. Function Talks", "Immersion vs. Abstraction Debates", "Cultural Beauty Ratings"
    ],
    "Rationalism & Logical Orders": [
      "Data-Focused Ceremonies", "Predictive Model Competitions", "Logical Inference Rallies", "Semantic Clarity Roundtables", "Cognitive Bias Workshops"
    ],
    "Mysticism & Intuition Trends": [
      "Dream Interpretation Gatherings", "Synchronicity Celebrations", "Symbol Reading Networks", "Intuitive Insight Festivals", "Ineffable Truth Chants"
    ]
  },
  "Economic & Resource Scarcity Contexts": {
    "Rationing & Frugality Cultures": [
      "Minimalist Resource Codes", "Scarcity Vigil Ceremonies", "Conservation Oaths", "Waste-Reduction Feasts", "Seed Storage Rituals"
    ],
    "Abundance & Surplus Celebrations": [
      "Harvest Festivals", "Surplus Sharing Traditions", "Credit Windfall Rituals", "Luck-Driven Market Parades", "Prosperity Distribution Ceremonies"
    ],
    "Barter & Alternative Economies": [
      "Gift Exchange Gatherings", "Reciprocal Borrowing Rites", "Reputation-Based Credit Systems", "Trade Language Serenades", "Non-Monetary Agreement Circles"
    ],
    "Illicit & Hidden Markets": [
      "Whispered Transaction Signals", "Secret Brokerage Alliances", "Invisible Good Exchanges", "Moral Ambiguity Discussions", "Gray Zone Bartering"
    ],
    "Scarcity Solutions & Projects": [
      "Engineered Resource Programs", "Habitat Expansion Ventures", "Fair Quota Assignments", "Inter-System Aid Missions", "Sustainability Innovations"
    ]
  },
  "Frontier & Explorer Mindsets": {
    "Pioneering & Discovery Values": [
      "First-Contact Etiquette Debates", "Hyperspace Challenge Trophies", "Unknown Sector Explorations", "Mapmaker Story Circles", "Distant Star Admiration"
    ],
    "Survival & Resilience Ideas": [
      "Emergency Shelter Planning", "Resource Scarcity Tactics", "Thriving Against Odds Tales", "Collective Repair Workshops", "Risk-Management Rituals"
    ],
    "Isolated Colony Dynamics": [
      "Cultural Drift Dialogues", "Tradition Recovery Efforts", "Gene Pool Concerns", "Morale-Building Festivals", "Community Solidarity Practices"
    ],
    "Courage & Fear Balancing": [
      "Bravery Token Exchanges", "Fear-Sharing Confessions", "Risk-Reward Calculation Rites", "Cautious Scout Celebrations", "Courageous Example Stories"
    ],
    "Migration & Long Journey Lore": [
      "Voyage Song Traditions", "Archaeological Memory Projects", "Recorded Star Routes", "Ancestor Vessel Tributes", "Emigrant Saga Tellings"
    ]
  },
  "Time & Calendar Rituals": {
    "Seasonal & Celestial Celebrations": [
      "Solstice Gatherings", "Planetary Alignment Observances", "Harvest Time Offerings", "Eclipse Dance Rites", "Comet Arrival Recognitions"
    ],
    "Interstellar Calendar Systems": [
      "Holonet Holiday Lists", "Trade Cycle Tracking", "Anniversary Preservation Customs", "Historic Event Remembrances", "Celestial Cycle Debates"
    ],
    "Generational & Heritage Markers": [
      "Name Renewal Traditions", "Heirloom Passing Ceremonies", "Time Capsule Openings", "Centennial Policy Reviews", "Feud Resolution Attempts"
    ],
    "Memory & Forgetting Practices": [
      "Cleansing Rituals for the Past", "Oblivion Acknowledgment Dances", "Lost-Time Memorials", "Record-Wiping Ceremonies", "Reset Day Gatherings"
    ],
    "Cosmic & Nebular Views of Time": [
      "Stellar Drift Recordings", "Wormhole Cycle Debates", "Quantum Year Theories", "Supernova Anniversary Panels", "Ion Storm Time Adjustments"
    ]
  }
}
</code>

./resources/starwars_categories.json
<code>
{
  "Planets & Locations": {
    "Core Worlds": [
      "Metropolitan Planet",
      "Cultural Hub",
      "Industrial Core",
      "Trading Nexus",
      "Senatorial Capital",
      "Banking Centre World",
      "Aristocratic Core Estate",
      "University District Planet",
      "Diplomatic Conclave World",
      "High-Gravity Core Colony"
    ],
    "Outer Rim Territories": [
      "Frontier Outpost",
      "Smuggler's Haven",
      "Mining Colony",
      "Refueling Station",
      "Neutral Commerce Point",
      "Refugee Enclave",
      "Overtaxed Resource World",
      "Dusty Frontier Settlement",
      "Hidden Rebel Safehouse",
      "Underdeveloped Agro-World"
    ],
    "Unknown Regions": [
      "Uncharted World",
      "Hidden Stronghold",
      "Secret Research Base",
      "Primitive Tribal World",
      "Mystical Nebula Colony",
      "Ruined Ancient City",
      "Crystal-Seeded Wasteland",
      "Bio-Engineered Paradise",
      "Dark Force Nexus Planet",
      "Isolated Diplomatic Retreat"
    ],
    "Space Stations & Megastructures": [
      "Orbital Shipyard",
      "Star Habitat Ring",
      "Holo-Entertainment Station",
      "Refugee Platform",
      "Archive Vault Satellite",
      "Trade Hub Goliath",
      "Military Training Station",
      "Medical Recovery Wheel",
      "Luxury Casino Orbital",
      "Deep-Space Fuel Depot"
    ],
    "Exotic Biomes": [
      "Jungle Moon",
      "Crystal Cavern World",
      "Living Ocean Sphere",
      "Bio-Dome Enclave",
      "Floating Gas Platforms",
      "Acidic Marsh Planet",
      "Volcanic Core World",
      "Aurora-Wrapped Ice Moon",
      "Fungal Grove Hemisphere",
      "Bioluminescent Archipelago"
    ]
  },
  "Species & Races": {
    "Humanoid Species": [
      "Long-Lived Diplomats",
      "Musical-Voiced Artisans",
      "Nocturnal Traders",
      "Telepathic Councilors",
      "Multi-armed Engineers",
      "Desert-Hardened Nomads",
      "Culturally Syncretic Merchants",
      "Philosophical Urban Dwellers",
      "Subterranean Visionaries",
      "Jungle-Dwelling Herbalists"
    ],
    "Non-Humanoid Species": [
      "Insectoid Hive-Minds",
      "Amorphous Shapeshifters",
      "Rocky Skinned Herbivores",
      "Luminescent Beings",
      "Trunked Forest Dwellers",
      "Molluscoid Swarm Collectives",
      "Bioluminescent Aerial Entities",
      "Semi-Aquatic Crustacean People",
      "Gravity-Adapted Quadrupeds",
      "Photosynthetic Plains Grazers"
    ],
    "Aquatic & Amphibious": [
      "Reef-Dwelling Sentients",
      "Bioluminescent Swimmers",
      "Deep-Sea Nomads",
      "Singing Kelp Farmers",
      "Coral Sculptors",
      "Saline Marsh Harvesters",
      "Shell-Trader Clans",
      "Amphibious Oracle Keepers",
      "Undertide Toolmakers",
      "Brinewater Philosopher Schools"
    ],
    "Avian & Winged": [
      "Feather-Crested Philosophers",
      "Gliding Skyfish",
      "Messenger Avian Folk",
      "Wind-Singing Avians",
      "Raptor-Warriors",
      "Song-Glider Mystics",
      "Nest-Building Tree Diplomats",
      "Hummingblade Avians",
      "Thermal Soaring Couriers",
      "Sky Shepherd Species"
    ],
    "Synthetic & Engineered": [
      "Gene-Spliced Hybrids",
      "Bio-Cybernetic Species",
      "Vat-Grown Servitors",
      "Cloned Diplomatic Castes",
      "Synthetic Flesh Constructs",
      "Memory-Imprinted Ecologists",
      "Hybrid Warrior Strains",
      "Emotion-Engineered Artisans",
      "Genetic Archivist Lineages",
      "Nanite-Integrated Designers"
    ]
  },
  "Organizations & Affiliations": {
    "Governing Bodies": [
      "Interstellar Republic",
      "Technocratic Council",
      "Harmonious Federation",
      "Confederation of Sectors",
      "Planetary Senate",
      "Progressive Governor Alliance",
      "Core Constitutional Union",
      "Frontier Mandate Assembly",
      "Protectorate Resource Council",
      "Cultural Preservation Junta"
    ],
    "Underworld Syndicates": [
      "Spice Cartel",
      "Shadow Broker Network",
      "Pirate Armada",
      "Black Market Consortium",
      "Saboteur Circles",
      "Holo-Runner Smuggling Rings",
      "Credit Laundering Clans",
      "Illicit Droid Chop Shops",
      "Gunrunner Constellation",
      "Rare Artifact Poachers"
    ],
    "Religious & Spiritual Orders": [
      "Force-Neutral Monastics",
      "Ancient Shamanic Cult",
      "Cosmic Harmony Temple",
      "Ancestor-Worship Fellowship",
      "Song-Priesthood",
      "Crystal Oracle Choir",
      "Celestial Balance Dervishes",
      "Star Beacon Ascetics",
      "Void Whisper Chaplains",
      "Labyrinth Dream Seers"
    ],
    "Military Factions": [
      "Planetary Defense Force",
      "Private Security Company",
      "Mercenary Regiments",
      "Cross-Sector Militia",
      "Armored Lance Cohorts",
      "Void Ranger Patrols",
      "Interdiction Fleet Corps",
      "Anti-Piracy Flotilla",
      "Shock-Trooper Brigades",
      "Special Recon Units"
    ],
    "Corporate Conglomerates": [
      "Hyperdrive Manufacturer",
      "Astro-Mining Corporation",
      "Cybernetic Enhancement Group",
      "Luxury Good Merchant Guild",
      "Terraforming Enterprise",
      "Bacta Supply Conglomerate",
      "Stellar Cartography Firms",
      "Artisanal Droid Workshops",
      "Nutrient Synth Consortium",
      "Bio-Industrial Combine"
    ],
    "Noble Houses & Dynasties": [
      "Ancient Aristocratic Lineage",
      "Resource-Rich Barony",
      "Diplomatic Margraviate",
      "Scholar Duke Estate",
      "Highborne Industrial Clan",
      "Stellar Marquis Court",
      "Platinum Crowned Heritage",
      "Famed Duelist Nobility",
      "Planet-Founding Dynasty",
      "Deep-Rooted Manor Lords"
    ]
  },
  "Technology & Engineering": {
    "Spacecraft & Vehicles": {
      "Civilian & Commercial Starships": [
        "Light Courier Vessel",
        "Luxury Diplomatic Yacht",
        "Merchant Guild Freighter",
        "Interstellar Passenger Liner",
        "Modular Cargo Hauler",
        "Artisanal Shipwright's Custom Cruiser",
        "Long-Distance Colony Transport",
        "Mobile Hydroponics Farm Ship",
        "Refueling & Service Platform",
        "Cultural Exchange Clipper"
      ],
      "Military & Tactical Starships": [
        "Blockade Runner Corvette",
        "Armored Patrol Frigate",
        "Stealth Scout Corvette",
        "Anti-Piracy Gunship",
        "Quantum Rift Interdictor Cruiser",
        "Ion Storm Defense Frigate",
        "High-Capacity Troop Transport",
        "Command & Control Dreadnought",
        "Targeted Strike Bomber",
        "Deep-Space Interceptor"
      ],
      "Exploratory & Research Vessels": [
        "Modular Exploration Cruiser",
        "Long-Range Surveyor",
        "Mobile Repair Tender (for field research)",
        "Terraforming Seedship",
        "Bacta Harvesting Frigate",
        "Astro-Lab Analytical Cutter",
        "Precursor Tech Salvage Rig",
        "Nebula Charting Pinnace",
        "Wormhole Stabilizer Tender",
        "Deep-Core Prospecting Barge"
      ],
      "Support & Specialized Craft": [
        "Gravity Well Constructor",
        "Drone Swarm Carrier",
        "Sensor Cloak E-War Corvette",
        "Medical Evacuation Cruiser",
        "Force-Nullification Scout",
        "Ambassadorial Envoy Shuttle",
        "Automated Sensor Net Layer",
        "Cultural Artifact Excavation Ship",
        "Dark Matter Harvesting Vessel",
        "Microgravity Crystal Grower"
      ],
      "Atmospheric & Surface Vehicles": [
        "All-Terrain Walker",
        "Hover-Tank",
        "Desert Skimmer",
        "Forest Speeder Bike",
        "Aero-Glider",
        "Podracing Speeder",
        "Anti-Grav Cargo Lifter",
        "Refugee Transport Crawler",
        "Urban Riot Control Sled",
        "Cliffside Rope Tram"
      ]
    },
    "Weaponry & Arms": {
      "Ranged Weaponry": [
        "High-Energy Blasters",
        "Ion Torpedoes",
        "Sonic Disruptors",
        "Mag-Pulse Cannons",
        "Plasma Cutters",
        "Scattershot Ion Rifles",
        "Beam Lances",
        "Hypervelocity Slug Throwers",
        "Adaptive Frequency Blasters",
        "Neural Lash Pistols"
      ],
      "Melee & Close-Combat Arms": [
        "Bio-Electronic Blade",
        "Vibro-Mace Emitters",
        "Plasma-Fused Axes",
        "Crystal-Edge Sabers",
        "Holo-Decoy Sabers (for dueling practice)",
        "Gravity Hammer Cannons (miniaturized for boarding actions)",
        "Photon Katanas",
        "EMP Filament Swords",
        "Sonic Stiletto Knives",
        "Nano-Edge Throwing Blades"
      ],
      "Specialized & Exotic Weaponry": [
        "Variable Yield Grenades",
        "Gravitational Mines",
        "Disintegration Beam Emitters",
        "Corrosive Gas Projectors",
        "Phase-Shift Needlers",
        "Molecular Destabilizers",
        "EM Field Grenade Launchers",
        "Dark Ion Repeaters",
        "Quantum Hook Launchers",
        "Force-Linked Crystal Staves"
      ],
      "Siege & Heavy Ordinance": [
        "Ion Drill Bombards",
        "Plasma Arc Throwers",
        "Tachyon Spike Rifles (scaled-up for emplacement)",
        "Multi-Missile Cluster Pods",
        "Neutron-Flux Torches",
        "Artillery Support Cannon",
        "Anti-Armor Drill Beams",
        "Gravity Lash Cannons",
        "Fusion Lance Mortars",
        "Mass Driver Railguns"
      ]
    },
    "Defensive & Protective Systems": {
      "Armor & Hull Enhancements": [
        "Reactive Armor Plating",
        "Molecular Absorption Armor",
        "Bio-Armored Hull Grafts",
        "Self-Healing Membrane Coatings",
        "Morphic Alloy Plates",
        "Nano-Spore Ablative Dust",
        "Memory Metal Hull Patches",
        "Pressure Stabilizer Frames",
        "Ion-Drain Hull Microfibers",
        "Heat-Resistant Carbon Blocks"
      ],
      "Shielding & Cloaking": [
        "Deflector Shields",
        "Cloaking Matrices",
        "Phase Inversion Shields",
        "Hard Light Shielding Arrays",
        "Photon Scattering Veils",
        "Gravity Diffraction Nets",
        "Anti-Psionic Shielding",
        "Holo-Cloak Camouflage Layers",
        "Quantum Shield Generators",
        "Temporal Phase Shielding"
      ],
      "Electronic Warfare & Countermeasures": [
        "Advanced EW Suites",
        "Static Discharge Hull (against ion attacks)",
        "Comprehensive Countermeasures",
        "EMP Nullification Grids",
        "Sonic Wave Repulsors",
        "Magnetic Field Stabilizers",
        "Neuro-Blockade Fields",
        "Harmonic Field Tuners",
        "Subspace Distortion Scramblers",
        "Holo-Decoy Emitters"
      ]
    },
    "Cybernetics & Bio-Enhancements": {
      "Sensory Enhancements": [
        "Optical Spectrum Filters",
        "Enhanced Auditory Filaments",
        "Thermal Vision Retinas",
        "Holographic HUD Overlays",
        "Scent Analysis Chamber",
        "UV/IR Filtered Eyes",
        "Neural-to-Holo Interpreters (for direct visual feed)",
        "Magnetosensitive Fingertips",
        "Force-Attuned Neural Bridges",
        "Neural Firewall Modules"
      ],
      "Physiological Modifications": [
        "Metabolic Efficiency Grafts",
        "Bio-Nanite Healing Meshes",
        "Bone Density Enhancers",
        "Anti-Toxin Blood Filters",
        "Radiation Shielded Skin",
        "Calorie Synthesis Glands",
        "Micro-Gravity Orientation Mods",
        "High-Altitude Lung Mods",
        "Muscle Fiber Realignment",
        "Lactic Acid Inhibitors"
      ],
      "Cognitive & Neural Upgrades": [
        "Neural Uplinks",
        "Synaptic Reflex Boosters",
        "Quantum Thought Accelerators",
        "Memory Archive Nodes",
        "Brainwave Link Portals",
        "Subvocal Communication Chips",
        "Genetic Immune Overhauls (brain-cell resilience)",
        "Data Storage Hippocampus Mods",
        "Emotion-Regulating Serotonin Pumps",
        "Cognitive Code Interpreters"
      ]
    },
    "Medical & Biotech": {
      "Healthcare Devices & Instruments": [
        "Advanced Prosthetics",
        "Nano-Surgical Suites",
        "Holo-Assisted Diagnostic Tables",
        "Anti-Allergy Gene Mods",
        "Tissue Fusion Wands",
        "Bioelectric Healing Currents",
        "Metabolic Recalibration Pills",
        "Enhanced Immune Algorithm Implants",
        "Stem Cell Replenishment Banks",
        "Viral Genome Editors"
      ],
      "Bioengineering & Genetic Tools": [
        "Clone Organ Farms",
        "Genetic Healing Chambers",
        "Cerebral Cloning Pods",
        "Organ Preservation Cryo Pods",
        "Bio-Reactor Stomach Implants",
        "Micro-Drone Surgery Swarms",
        "Epigenetic Modulation Rooms",
        "Alloy Bone Graft Systems",
        "Gene Therapy Micro-Labs",
        "Adaptive Tissue Grafting Frames"
      ],
      "Rehabilitation & Recovery Systems": [
        "Bacta Refinement Centers",
        "Stasis Recovery Modules",
        "Neural Stress Dissipators",
        "Memory Repair Implants",
        "Gravity Compression Therapy Beds",
        "Psycho-Emotional Rehabilitation Modules",
        "Cryo-Bacta Hybrid Gels",
        "Anti-Radiation Enzyme Baths",
        "Longevity Hormone Synergy Labs",
        "Shock Trauma Reduction Pods"
      ]
    },
    "Communication & Information Systems": {
      "Long-Range Communication": [
        "Holo-Net Transceivers",
        "Quantum Entanglement Relays",
        "Long-Range Subspace Antennas",
        "Zero-Delay Transmission Links",
        "Autonomous Com Satellite Swarms",
        "Sub-Luminal Burst Codes",
        "Warp Gap Communication Bridges",
        "Astro-Cartographic Signal Mirrors",
        "Prism Light Code Refractors",
        "Neutrino Code Decoders"
      ],
      "Encryption & Security": [
        "Encrypted Beacon Buoys",
        "Multi-Layer Com Scramblers",
        "Quantum Key Distribution Stations",
        "Non-Linear Cipher Arrays",
        "Anti-Snooping Code Membranes",
        "Fractal Compression Hubs",
        "Silent Running Com Nodes",
        "Time-Shifted Code Rings",
        "Memory Whisper Exchange Units",
        "Bio-Encrypted Thought Relays"
      ],
      "Holo-Interfaces & Translators": [
        "Inter-Faith Translation Chips",
        "Telepathic Interface Systems",
        "Neural Link Headsets",
        "Holo-Grid Pattern Mappers",
        "Force-Echo Translators",
        "Xenolinguistic Data Filters",
        "Holo-Fog Relay Globes",
        "Harmonic Whisper Rerouters",
        "Data Frequency Weavers",
        "Genetic Code-to-Signal Converters"
      ]
    }
  },
  "Droids & Artificial Life": {
    "Astromech & Navigation Units": {
      "Navigation & Survey Models": [
        "Navigation Specialist Droid",
        "Drift-Charting Droid",
        "Orbital Lane Mapper",
        "Hyperspace Lane Cartographer",
        "Sub-Orbital Surveyor Unit",
        "Wormhole Trajectory Calculator",
        "Comet Trail Analyzer",
        "Star Cluster Scout Drone"
      ],
      "Maintenance & Repair Astromechs": [
        "Hull Maintenance Unit",
        "Emergency Repair Sprinter",
        "Quantum Computation Droid (for diagnostics)",
        "Atmospheric Re-Entry Bot (hull integrity checks)",
        "Subspace Calibration Droid",
        "Hull Microfracture Sensor",
        "Structural Rivet Installer",
        "Grav-Field Tuning Mech"
      ],
      "Sensor & Data Analysis Bots": [
        "Sensor Probe Variant",
        "Holo-Splicer Interface Droid (data feed optimization)",
        "Radiation Profile Sampler",
        "Spectral Signature Comparator",
        "Ion Storm Monitor Drone",
        "Elemental Composition Analyzer",
        "Magnetosphere Mapper",
        "Solar Flare Forecaster"
      ]
    },
    "Protocol & Diplomatic Models": {
      "Diplomatic Interface Droids": [
        "Multi-Lingual Mediator Droid",
        "Ambassadorial Escort Droid",
        "Treaty Signatory Assistant",
        "Peace Conference Attendant",
        "Inter-Cultural Liaison Droid",
        "Protocol Archivist",
        "Holo-Record Diplomatic Aide",
        "Non-Aggression Pact Facilitator"
      ],
      "Cultural & Etiquette Units": [
        "Cultural Etiquette Unit",
        "Ceremonial Greeter Droid",
        "Art Critique Companion",
        "Festival Rites Interpreter",
        "Customs Declaration Analyzer",
        "Heritage Song Replayer",
        "Mythology Recitation Model",
        "Religious Observance Aide"
      ],
      "Trade & Bureaucratic Assistants": [
        "Trade Negotiator Model",
        "Border Dispute Facilitator",
        "Bureaucratic Overwatch Droid",
        "Taxation Codex Reader",
        "Holo-Ledger Balancing Unit",
        "Fair-Trade Compliance Checker",
        "Market Exchange Calculator",
        "Credit Arbitration Droid"
      ]
    },
    "Combat & Security Droids": {
      "Security & Enforcement Units": [
        "Armored Enforcer Droid",
        "Anti-Riot Walker",
        "Frontier Patrol Droid",
        "Custodial Enforcement Automaton",
        "Perimeter Alarm Mech",
        "Access Control Monitor Droid",
        "Ion Barrier Gatekeeper",
        "Crowd Dispersal Walker"
      ],
      "Battlefield & Tactical Droids": [
        "Heavy Gunner Droid",
        "Sniper-Pattern Droid",
        "Anti-Armor Quadruped",
        "Explosive Ordnance Defuser",
        "Tracer Beacon Commando Bot",
        "Adaptive Shielding Drone",
        "Precision Strike Coordinator",
        "Flank Cover Sentinel"
      ],
      "Covert & Specialized Combat Models": [
        "Stealth Infiltrator Unit",
        "Hunter-Killer Sentinel",
        "Ion Blade Gladiator",
        "EMP Disruption Scout",
        "Biowarfare Countermeasure Droid",
        "Quantum Cloak Infiltrator",
        "Sabotage Protocol Droid",
        "Holo-Decoy Assault Droid"
      ]
    },
    "Labor, Industrial & Service Droids": {
      "Agricultural & Environmental Bots": [
        "Agri-Drone Harvester",
        "Undersea Farming Assistant",
        "Forest Canopy Pruner",
        "Hydroponic Garden Tiller",
        "Seed Dispersal Mechanism",
        "Soil Composition Tester",
        "Pest Control Skimmer",
        "Fungal Crop Monitor"
      ],
      "Industrial & Manufacturing Units": [
        "Construction Support Droid",
        "Factory Line Coordinator",
        "Junk Salvage Bot",
        "Refinery Quality Inspector",
        "Alloy Ingot Pourer",
        "Precision Welding Droid",
        "Metal Press Operator Bot",
        "Energy Cell Assembly Droid"
      ],
      "Logistics & Cargo Handling Models": [
        "Cargo Loader Automaton",
        "Spaceport Dock Droid",
        "Gravity Freight Lifter",
        "Pallet Sorting Servitor",
        "Automated Inventory Tracker",
        "Shipment Seal Checker",
        "Trade Depot Stacker",
        "Freighter Bay Organizer"
      ],
      "Infrastructure & Maintenance Droids": [
        "Habitat Maintenance Unit",
        "Solar Collector Adjuster",
        "Waste Management Droid",
        "Aqueduct Flow Monitor",
        "Air Filtration Regulator Bot",
        "Thermal Conduit Stabilizer",
        "Roadway Patching Machine",
        "Structural Integrity Scanner"
      ]
    },
    "Medical, Caregiving & Wellness Droids": {
      "Surgical & Operating Theater Models": [
        "Surgical Assistant Unit",
        "Bacta Regeneration Droid",
        "Precision Laser Scalpel Droid",
        "Anesthetic Delivery Automaton",
        "Micro-Suture Needle Bot",
        "Neural Interface Calibration Unit",
        "Organ Transplant Support Droid",
        "Holo-Surgery Aid Droid"
      ],
      "Recovery & Therapeutic Units": [
        "Infirmary Protocol Droid",
        "Geriatric Care Model",
        "Therapeutic Companion Droid",
        "Rehabilitation Guide Automaton",
        "Kinetic Therapy Massager",
        "Nutrient Infusion Assistant",
        "Muscle Stimulator Drone",
        "Mobility Assistance Walker"
      ],
      "Mental Health & Emergency Care": [
        "Mental Wellness Interface",
        "Holo-Psychology Coach",
        "Neural Recalibration Droid",
        "Crisis Response Medic Bot",
        "Trauma Counseling Companion",
        "Subspace Distress Signal Responder",
        "Field Triage Analyzing Droid",
        "Quarantine Monitoring Unit"
      ]
    }
  },
  "Vehicles & Transportation": {
    "Starfighters": {
      "Light & Interceptor Craft": [
        "Interceptor Craft",
        "Short-Range Dart Fighter",
        "Light Recon Swoop",
        "Micro-Lancer Patrol Ship",
        "High-Speed Chase Skiff"
      ],
      "Heavy Attack & Bomber Craft": [
        "Heavy Bomber Variant",
        "Armored Strike Gunship",
        "Torpedo Payload Fighter",
        "Forward Assault Bomber",
        "Long-Range Siege Craft"
      ],
      "Stealth & Recon Units": [
        "Stealth Strike Fighter",
        "Holo-Hunter Variant",
        "Mag-Sloop Recon Fighter",
        "Signal-Dampening Scout",
        "Nebula-Cloaked Surveyor"
      ],
      "Escort & Defense Fighters": [
        "Star-Patrol Gunship",
        "Shield-Piercing Raider",
        "Broad-Winged Interdictor",
        "Flare-Wing Escort",
        "Sentinel Escort Lance"
      ]
    },
    "Freighters & Transports": {
      "Cargo & Trade Freighters": [
        "Blockade Freighter",
        "Cargo Barge",
        "Armored Convoy Hauler",
        "Stealth Smuggler Freighter",
        "Sector-Wide Freight Hauler"
      ],
      "Passenger & Diplomatic Vessels": [
        "Refugee Transport Vessel",
        "Diplomatic Courier Ship",
        "Holo-Storage Vessel",
        "Cultural Exchange Shuttle",
        "Long-Haul Passenger Liner"
      ],
      "Modular & Specialized Transports": [
        "Mobile Workshop Freighter",
        "Modular Colony Transporter",
        "Resource Tanker Tug",
        "Orbital Logistics Cutter",
        "Adaptive Docking Tender"
      ],
      "Rapid & Covert Delivery": [
        "Rapid Delivery Cutter",
        "Smuggler’s Slip Freighter",
        "Encrypted Cargo Sloop",
        "Micro-Container Runner",
        "Stealthy Courier Sparrow"
      ]
    },
    "Capital Ships": {
      "Command & Control Vessels": [
        "Command Dreadnought",
        "Carrier Battleship",
        "Holo-Barrage Destroyer",
        "Admiralty Control Cruiser",
        "Fleet Coordination Beacon Ship"
      ],
      "Heavy Combat & Siege Ships": [
        "Artillery Cruiser",
        "Interdictor Starcruiser",
        "Mobile Space Fortress",
        "Graviton Lance Cruiser",
        "Anti-Capital Ion Frigate"
      ],
      "Colonization & Support Platforms": [
        "Deep-Space Colony Vessel",
        "Resource Processor Ship",
        "Long-Ark Explorer",
        "Terraform Engineering Vessel",
        "Frontier Habitat Seeder"
      ],
      "Diplomatic & Cultural Capitals": [
        "Ambassadorial Harmony Cruiser",
        "Diplomatic Envoy Barge",
        "Museum Archive Ship",
        "Holo-Opera Stage Carrier",
        "Cultural Hub Cruiser"
      ]
    },
    "Ground Vehicles": {
      "Military & Security Units": [
        "Hover-Tank",
        "All-Terrain Walker",
        "Armored Personnel Transport",
        "Ion Shielded Crawler",
        "Gravity Anchored Howitzer-Rig"
      ],
      "Recon & Exploration": [
        "Desert Skimmer",
        "Forest Speeder Bike",
        "Canyon Cliff-Climber",
        "Swamp Treaded Rover",
        "Ice-Plateau Scout Sled"
      ],
      "Utility & Cargo Haulers": [
        "Grav-Tractor Hauler",
        "Solar-Powered Cargo Lifter",
        "Harvest Mech Walker",
        "Hydro-Pump Transporter",
        "Modular Crate Carrier"
      ],
      "Urban & Civilian Transport": [
        "Urban Riot Control Sled",
        "Market District Hover-Tram",
        "Ambulance Speeder Unit",
        "Floating Taxi Prowler",
        "Refugee Evacuation Bus"
      ]
    },
    "Atmospheric & Racing Craft": {
      "Commercial & Utility Flyers": [
        "Urban Taxi Flier",
        "Atmospheric Survey Skiff",
        "Aqua-Hover Sled",
        "Agricultural Spray Plane",
        "Cargo Glide Blimp"
      ],
      "Sporting & Racing Vehicles": [
        "Podracing Speeder",
        "Solar Racer Craft",
        "Wind Tunnel Sailplane",
        "Jungle Hoverboard",
        "Holo-Slalom Racing Dart"
      ],
      "Exploratory & Research Flyers": [
        "Thermal Updraft Skimmer",
        "Fungal Forest Sweeper",
        "Mag-Lev Observation Skiff",
        "Cloud-Top Monitoring Drone",
        "Aurora Sampling Kite"
      ],
      "Security & Patrol Craft": [
        "Perimeter Hover-Guard",
        "High-Altitude Sentry Glider",
        "Lighthouse Beacon Flier",
        "Harbor Patrol Ornithopter",
        "Treeline Recon Spinner"
      ]
    }
  },
  "Cultural & Societal Elements": {
    "Festivals & Celebrations": [
      "Harvest Moon Festival",
      "Cyclic Star Commemoration",
      "Founding Day Revelries",
      "Cultural Exchange Gala",
      "Holo-Dramatic Parades",
      "Crystal Solstice Carnival",
      "Pilgrim's Sun Dance",
      "Trader's Market Jubilee",
      "Peace Accord Anniversary",
      "Memory Telling Symposium"
    ],
    "Currencies & Trade Items": [
      "Credit Chips",
      "Gem-Backed Coins",
      "Energy Tokens",
      "Food Ration Bars",
      "Spice Ingots",
      "Holo-Backed Notes",
      "Neo-Polymer Credit Slips",
      "Bio-Gel Exchange Units",
      "Inter-Union Standard Cubes",
      "Rare Metal Bars"
    ],
    "Languages & Dialects": [
      "Common Trade Tongue",
      "Click-Based Language",
      "Musical Dialect",
      "Runic Scripted Speech",
      "Telepathic Lexicon",
      "Fragmentary Migration Pidgin",
      "Harmonic Festival Cant",
      "Arcane Symbolic Whisper",
      "Data-Tone Compression Speech",
      "High Court Elocution"
    ],
    "Arts & Music": [
      "Holo-Opera Performances",
      "Crystal Chime Instruments",
      "Living Canvas Art",
      "Interactive Mosaics",
      "Bio-Luminescent Paintings",
      "Sound-Weave Fabrics",
      "Orbital Choral Assemblies",
      "Symbolic Graffiti Murals",
      "Resonant Chord Weavings",
      "Memory Singing Techniques"
    ],
    "Philosophies & Belief Systems": [
      "Cosmic Balance Doctrine",
      "Rational Minimalism",
      "Void Worship",
      "Star Lineage Reverence",
      "Cycle of Renewal Creed",
      "Quantum Harmony Ethics",
      "Ancient Talisman Theories",
      "Holo-Fable Didacticism",
      "Pragmatic Stoicism",
      "Nebular Insight Paths"
    ],
    "Cuisine & Gastronomy": [
      "Fermented Desert Fruit",
      "Spicy Aquatic Stews",
      "Engineered Grain Loaves",
      "Meat from Domesticated Flyers",
      "Tangy Fungal Pastes",
      "Stellar Spice Rubs",
      "Bio-Ferment Brew",
      "Nutrient Jelly Confections",
      "Corianderine Root Dishes",
      "Ionic Flavor Extracts"
    ],
    "Traditional Garments": [
      "Silken Ceremonial Robes",
      "Nomadic Weather Cloaks",
      "Radiant Festival Masks",
      "Armored Clan Tunics",
      "Holo-Fabric Suits",
      "Crystal-Etched Headdresses",
      "Artisan Spinner Wraps",
      "Hydro-Filament Gowns",
      "Runed Belt Sashes",
      "Wind-Glider Wing Cloaks"
    ]
  },
  "Economy & Trade": {
    "Resource Extraction": [
      "Ores from Asteroid Mines",
      "Gas Harvesting Platforms",
      "Spice Fields",
      "Exotic Wood Logging",
      "Rare Crystal Mining",
      "Ion-Charged Liquid Wells",
      "Fungal Protein Farms",
      "Bio-Fuel Filter Marshes",
      "Deep Core Drilling Rigs",
      "Hydrothermal Mineral Pools"
    ],
    "Trade Routes & Corridors": [
      "Core-To-Rim Hyperspace Lane",
      "Secret Smuggler Run",
      "Pilgrim's Crossroad",
      "Merchant Convoy Path",
      "Barrier Reef Channel",
      "Star-Bridge Trade Spine",
      "Cloaked Nebula Passage",
      "Crosswind Resource Corridor",
      "Guild-Patrolled Line",
      "Frost Rim Spur"
    ],
    "Merchant Guilds & Unions": [
      "Interstellar Trade Guild",
      "Freighter Captains' Union",
      "Fair Commerce Pact",
      "Artisan Merchant Collective",
      "Maritime Traders' Lodge",
      "Holo-Ledger Consortium",
      "Quality Assurance Council",
      "Port Authority Alliance",
      "Guild of Appraisers",
      "Elemental Broker Circle"
    ],
    "Banking & Finance": [
      "Credit-Lending Houses",
      "Interstellar Banking Clans",
      "Commodity Exchange Stations",
      "Hedging Market Hubs",
      "Loan Brokerage Firms",
      "Micro-Credit Habitat Banks",
      "Stellar Insurance Agencies",
      "Risk-Adjusted Hedge Houses",
      "Resource Futures Exchanges",
      "Cross-Sector Investment Pools"
    ],
    "Black Markets & Illicit Trade": [
      "Shadow Auction Houses",
      "Hidden Spice Bazaars",
      "Armament Black Markets",
      "Clandestine Organ Deals",
      "Encrypted Deal Nodes",
      "Counterfeit ID Forges",
      "Memory Data Black Traders",
      "Bio-Weapon Smuggle Rings",
      "Corrupt Dock Channel",
      "Nightblind Credit Launderers"
    ]
  },
  "History & Eras": {
    "Ancient Times": [
      "Pre-Republic Civilizations",
      "Lost Temple Builders",
      "Proto-Technology Era",
      "Mythic Hero-Kings",
      "Pre-Contact Tribes",
      "Arcane Artifact Epoch",
      "Astral Map Founding",
      "Pre-Credit Trade Systems",
      "Nebula Lore Keepers",
      "Proto-Droid Experiments"
    ],
    "Old Republic Era": [
      "Founding of the Republic",
      "Golden Age of Trade",
      "Widespread Diplomatic Missions",
      "Codification of Interstellar Law",
      "Expansion of Core Worlds",
      "Millennial Peace Period",
      "Holo-Vault Preservation",
      "Cultural Renaissance Years",
      "Stellar Charter Signing",
      "Border Stabilization Efforts"
    ],
    "Imperial Era": [
      "Centralized Authoritarian Rule",
      "Suppression of Alien Rights",
      "Massive Naval Fleets",
      "Industrial Overdrive",
      "Secret Police Networks",
      "Forced Planetary Relocations",
      "Uniform Currency Mandates",
      "Propaganda Education Systems",
      "Terraforming for Control",
      "Restricted Hyperlanes"
    ],
    "Post-Imperial & Reconstruction": [
      "Demilitarization Efforts",
      "Refugee Resettlement",
      "Cultural Restoration Movements",
      "Truth & Reconciliation Councils",
      "Border Redrawal",
      "Infrastructure Rebuilding",
      "Holo-Net Reconnection",
      "Diplomatic Healing Summits",
      "Civic Cultural Exchanges",
      "Trade Normalization Pacts"
    ],
    "Mandalorian Wars & Conflicts": [
      "Clan Skirmishes",
      "Beskar Armor Innovations",
      "Mercenary Alliances",
      "Cultural Diaspora",
      "Warrior Code Reformations",
      "Honor Duel Protocols",
      "Frontier Raider Incursions",
      "Anti-Mandalorian Coalitions",
      "Nomadic Fleet Assemblies",
      "Wartime Relic Smuggling"
    ],
    "High Republic & Renaissance": [
      "Philosophical Resurgence",
      "Artistic Golden Age",
      "Holo-Net Expansion",
      "Diplomatic Renaissance",
      "Prosperous Outer Colonies",
      "Scholastic Embassies",
      "Techno-Ethical Councils",
      "Cultural Fusion Feasts",
      "Interfaith Knowledge Collectives",
      "Soft Power Diplomacy"
    ]
  },
  "Military & Conflict": {
    "Mercenary Groups": [
      "Hired Gunslingers",
      "Elite Shock Troops",
      "Nomadic Warrior Bands",
      "Privateer Merc Corps",
      "Cyber-Enhanced Commandos",
      "Blaster Lancer Cadres",
      "Battle-Drift Experts",
      "Void-Boarding Marines",
      "Plasma Spear Companies",
      "Infiltration Strike Teams"
    ],
    "Pirate Fleets": [
      "Corsair Brigands",
      "Marauder Warlords",
      "Asteroid Hideout Pirates",
      "Deep-Space Ambushers",
      "Rift Passage Raiders",
      "Holo-Trap Corsairs",
      "Cloaked Engine Cutters",
      "Loot-Sorting Salvagers",
      "Ship-Jacker Crews",
      "Nebula Snare Marauders"
    ],
    "Planetary Militias": [
      "Local Defense Volunteers",
      "City Guard Units",
      "Tribal Watchgroups",
      "Frontier Garrison",
      "Settler Protection Corps",
      "Undersea Sentry Bands",
      "Mountain Ranger Patrols",
      "Desert Survival Brigades",
      "Spice Field Guards",
      "Core Market Watchmen"
    ],
    "Mandalorian Clans": [
      "Armor-Forger Houses",
      "Nomadic Hunter Clans",
      "Mercenary Contracts",
      "Honor-Duel Traditions",
      "Vigilant Frontier Watch",
      "Forge Council Gatherers",
      "Bounty War Alliances",
      "Wandering Shield Menders",
      "Clan Feasting Bands",
      "Spiral Helm Legacies"
    ],
    "Defense & Security Forces": [
      "Border Patrol Frigates",
      "Anti-Piracy Taskforce",
      "Minefield Operators",
      "Fortress World Defenders",
      "Mobile Response Units",
      "Interdiction Sloop Wings",
      "Asteroid Guard Stations",
      "Rapid Deployment Corps",
      "Energy Shield Brigades",
      "Crisis Negotiation Teams"
    ]
  },
  "Myth & Religion": {
    "Force-Related Traditions": [
      "Mystic Seers",
      "Balance Seekers",
      "Nature-Channeling Hermits",
      "Cosmic Harmony Cultists",
      "Ancient Visionaries",
      "Crystal Meditation Sects",
      "Star-Dream Interpreters",
      "Tidal Force Adepts",
      "Ancestral Jedi Echoes",
      "Moonshadow Contemplatives"
    ],
    "Non-Force Spirituality": [
      "Elemental Ancestral Faith",
      "Sun-Worshipping Creed",
      "Moon-Harvest Rites",
      "Ancestor Idol Shrines",
      "Star Oracle Diviners",
      "Harmonic Talisman Circles",
      "Festival of Nebula Gods",
      "Sand Whisperer Altars",
      "Stormcaller Totem Dances",
      "Meteor Skywatch Lore"
    ],
    "Superstitions & Folk Tales": [
      "Ghost Ship Legends",
      "Solar Eclipse Omens",
      "Comet Born Prophecies",
      "Rune Reading Mystics",
      "Behemoth Beast Myths",
      "Starfall Doom Stories",
      "Eternal Storm Folklore",
      "Aurora Omen Sketches",
      "Gravitic Whisper Rumors",
      "Cosmic Worm Fables"
    ],
    "Pilgrimages & Holy Sites": [
      "Sacred Meteor Crater",
      "Cleansing Spring Temple",
      "Star Alignment Observatory",
      "Burial Grounds of Heroes",
      "Whispering Cavern of Echoes",
      "Life-Tree Sanctuary",
      "Crystal Chime Chapel",
      "Cosmic Confluence Arches",
      "Transcendent Spore Mound",
      "Silent Grove Monastery"
    ],
    "Local Deities & Demi-Gods": [
      "Mountain Guardian Spirits",
      "Ocean Depth Lords",
      "Sky Dancer Deities",
      "Beast Tamers of Lore",
      "Void Whisper Gods",
      "Storm Beast Patrons",
      "Choral Echo Guardians",
      "Fungal Field Protectors",
      "Astral Shepherd Idols",
      "Comet Tail Messengers"
    ]
  },
  "Architecture & Infrastructure": {
    "Urban Cityscapes": [
      "Sprawling Megacity",
      "Skyscraper Hive",
      "Layered Urban Arcologies",
      "Sun-Dome Resort City",
      "Holo-Advert District",
      "Undercity Tube Network",
      "Gravity-Pier Tower Blocks",
      "Neon Cultural Plaza",
      "Artisan Quarter Mosaics",
      "Bio-Tunnel Marketways"
    ],
    "Floating & Aerial Habitats": [
      "Cloud City Platforms",
      "Suspended Gardens",
      "Anti-Gravity Farms",
      "High-Altitude Observatories",
      "Soaring Wind Turbines",
      "Hovering Shield Domes",
      "Storm Cloud Sanctuaries",
      "Floating Parabolic Temples",
      "Balloon-Anchor Hamlets",
      "Holo-Bridge Networks"
    ],
    "Underwater Domes & Enclaves": [
      "Submersible Habitat Domes",
      "Undersea Research Stations",
      "Aquatic Trade Pavilions",
      "Seabed Artifact Archives",
      "Coral Dome Towns",
      "Jelly-Pod Commuter Lines",
      "Hydrothermal Lecture Halls",
      "Bio-Reflective Bubble Quarters",
      "Marine Observatory Spheres",
      "Currents-Driven Market Halls"
    ],
    "Desert Outposts & Forts": [
      "Sand-Buried Stations",
      "Rocky Cliff Settlements",
      "Solar Collector Farms",
      "Well Oasis Towns",
      "Dust Storm Shelters",
      "Burrowed Vault Bunkers",
      "Heat-Diffusion Cloisters",
      "Mirage-Shielded Strongholds",
      "Caravan Rest Cantons",
      "Salt Flat Defensive Posts"
    ],
    "Jungle & Forest Settlements": [
      "Canopy Villages",
      "Tree-Bridge Townships",
      "Bioluminescent Forest Hubs",
      "Root-Communal Shelters",
      "Hidden Herbalist Camps",
      "Mossy Skywalks",
      "Seed Pod Council Chambers",
      "Vine-Grown Watchposts",
      "Mushroom Dome Homesteads",
      "Bio-Nest Complexes"
    ]
  },
  "Notable Figures & Classes": {
    "Smugglers & Traders": [
      "Spice Smuggler",
      "Black Market Broker",
      "Hyperlane Cartographer",
      "Independent Merchant",
      "Blockade Runner",
      "Data-Fence Whisperer",
      "Obscure Artifacts Hawker",
      "Gravity Slingshot Courier",
      "Asteroid Salvage Trader",
      "Holo-Keeper Middleman"
    ],
    "Bounty Hunters & Trackers": [
      "Precision Marksman",
      "Beast Tracker",
      "Cyber-Augmented Hunter",
      "Rogue Droid Chaser",
      "Subspace Interceptor",
      "Thermal Scope Sniper",
      "Stealth Net Trapper",
      "Bio-Tag Tracker",
      "Force-Negation Hunter",
      "Toxin Dart Specializer"
    ],
    "Diplomats & Negotiators": [
      "Ambassadorial Envoy",
      "Treaty Mediator",
      "Cultural Liaison",
      "Trade Deal Negotiator",
      "Conflict Resolution Expert",
      "Language Bridge Officer",
      "Peace Charter Drafter",
      "Ethics Council Advocate",
      "Border Talk Emissary",
      "Alliance Harmonizer"
    ],
    "Explorers & Scouts": [
      "Star Cluster Surveyor",
      "Wild Planet Pathfinder",
      "Space Anomaly Researcher",
      "Hyperspace Lane Pioneer",
      "Lost Civilization Seeker",
      "Eco-Zone Mapper",
      "Terraform Study Pilot",
      "Nebula Probe Operator",
      "Precursor Ruin Diver",
      "Frontier Data Harvester"
    ],
    "Scholars & Healers": [
      "Archivist Monk",
      "Linguistic Scholar",
      "Medical Specialist",
      "Herbal Healer",
      "Technological Historian",
      "Force Lore Chronicler",
      "Cultural Memory Keeper",
      "Psycho-Social Healer",
      "Holo-Library Curator",
      "Gene Sequence Analyzer"
    ]
  },
  "Natural Phenomena & Environments": {
    "Astronomical Features": [
      "Binary Star Systems",
      "Rogue Planets",
      "Pulsar Signal Points",
      "Wormhole Apertures",
      "Cosmic Dust Clouds",
      "Ion Storm Regions",
      "Nebula Growth Pods",
      "Dark Matter Veils",
      "Holo-Footprint Quasars",
      "Stellar Forge Clusters"
    ],
    "Nebulae & Gas Clouds": [
      "Ionized Nebula Fields",
      "Gas Mining Regions",
      "Hallucinogenic Spore Clouds",
      "Electromagnetic Storm Clouds",
      "Refraction Nebulae",
      "Bio-Synth Gas Banks",
      "Chromatic Particle Gardens",
      "Anti-Gravity Vortex Puffs",
      "Pheromone Mist Shoals",
      "Stasis Vapor Drifts"
    ],
    "Asteroid Fields & Belts": [
      "Dense Ore Asteroid Belt",
      "Treacherous Pirate Hideaway Field",
      "Icy Comet Clusters",
      "Mine-Claimed Asteroid Region",
      "Holo-Beacon Drift Zone",
      "Shatter-Fragment Fields",
      "Bio-Mold Asteroid Habs",
      "Holo-Reflective Rock Belts",
      "Grav-Shard Deposits",
      "Ancient Impact Craters"
    ],
    "Exotic Weather & Storms": [
      "Ion Tempests",
      "Plasma Lightning Discharges",
      "Aurora Rainfalls",
      "Magnetic Windstorms",
      "Sonic Shockfronts",
      "Acidic Vapor Showers",
      "Thermal Inversion Gales",
      "Glitterdust Breezes",
      "Tectonic Quake Bursts",
      "Frozen Vapor Maelstroms"
    ],
    "Living & Semi-Sentient Worlds": [
      "Biotic Planetary Minds",
      "Forest-Hive Ecosystems",
      "Symbiotic Coral Planets",
      "Mycelial Network Worlds",
      "Crystal Consciousness Spheres",
      "Flora-Directed Evolution Planets",
      "Pulsating Psychic Reefs",
      "Solar-Fed Flower Fields",
      "Element-Tuned Gaia Worlds",
      "Living Mineral Arches"
    ]
  },
  "Resources & Materials": {
    "Minerals & Metals": {
      "Common Ores & Base Metals": [
        "Durasteel Ore",
        "Ion-Charged Iron",
        "Light Alloy Copper-Vein",
        "Holo-Refined Aluminum Flakes",
        "Manganese-Mix Nodules",
        "Zinc-Bound Ore Clusters",
        "Silicon-Based Metallic Sand",
        "Vanadium Shard Deposits",
        "Cobalt-Infused Iron Ore",
        "Boron Carbide Pellets"
      ],
      "Precious & Rare Elements": [
        "Kyber Crystal Shards",
        "Photonic Gemstones",
        "Hyperconductive Alloy Nuggets",
        "Memory Metal Ingots",
        "Aurora-Phase Platinum",
        "Gem-Backed Baradium Specks",
        "Iridium-Infused Jewels",
        "Rhodium Stasis Drops",
        "Quantum-Neutrino Crystals",
        "Subspace-Resonant Diamonds"
      ],
      "Ceramics & Exotic Minerals": [
        "Armor-Grade Ceramics",
        "Grav-Powder Dust",
        "Flare Quartz",
        "Bio-Reactive Clays",
        "Thermal Composite Granules",
        "Chameleon Silicates",
        "Pressure-Formed Obsidian Glass",
        "Electro-Ceramic Rods",
        "Ion-Absorbent Porcelain",
        "Holographic Reflector Crystals"
      ]
    },
    "Flora & Fauna Resources": {
      "Edible & Nutritional Flora": [
        "Nutrient-Rich Moss",
        "Synth-Fiber Bark Strips",
        "High-Protein Insect Swarms",
        "Starch-Tubers of Oasis Fields",
        "Marrow-Fern Roots",
        "Jungle Leaf Meal Packs",
        "Aqua-Marrow Fungi",
        "Terra-Grain Pods",
        "Sweet Vanta-Honeydew",
        "Fungal Nut Clusters"
      ],
      "Medicinal & Alchemical Plants": [
        "Medicinal Mushrooms",
        "Spice Bloom Flowers",
        "Aroma-Herb Pods",
        "Dewberry Regenerative Leaves",
        "Psi-Active Lotus Petals",
        "Nightshade Ether-Stalks",
        "Bacta-Sap Shrub Saplings",
        "Chime Orchards Antitoxin Blossoms",
        "Anti-Fungal Root Caps",
        "Eldritch Dewdrops"
      ],
      "Animal Derivatives & Byproducts": [
        "Hunter-Beasts for Pelts",
        "Bio-Luminescent Vines (hosted by symbiotic fauna)",
        "Chitin Shell Fragments",
        "Force-Touched Beast Horns",
        "Spine-Fibre Silk (from larval worms)",
        "Dried Wing-Powder from Avian Species",
        "Glowfish Oil Extracts",
        "Mollusk Pearl Glands",
        "Desert Lizard Hide",
        "Space Whale Ambergris"
      ],
      "Structural & Utility Organics": [
        "Fruitful Chime Orchards Wood",
        "Synth-Fiber Reeds",
        "Holo-Forest Vine Tissues",
        "Mycelial Strand Ropes",
        "Bio-Composite Bark Panels",
        "Aromatic Resin Waxes",
        "Coral Framework Husks",
        "Nectar-Welded Plant Fibers",
        "Thorn-Shell Lumber",
        "Crystalline Pollen Dust"
      ]
    },
    "Energy & Fuel Sources": {
      "Conventional & Engineered Fuels": [
        "Fusion Reactor Pellets",
        "Ion Battery Reservoirs",
        "Tibanna Gas Canisters",
        "Refined Hypergolic Liquids",
        "Compressed Reactor Rods",
        "Polymerized Fuel Cubes",
        "Ferro-Hydro Cartridges",
        "High-Density Plasma Globes",
        "Liquid Energy Suspensions",
        "Gravity Well Fuel Cells"
      ],
      "Renewable & Sustainable Sources": [
        "Solar Collectors",
        "Wind Resonance Generators",
        "Thermal Vent Taps",
        "Bio-Fuel Crops",
        "Algae-Pod Energy Soup",
        "Tidal Wave Harnessers",
        "Stellar Bloom Petals (solar-dye material)",
        "Biolum Insect Dynamo Farms",
        "Glacier Melt Turbines",
        "Geothermal Crystal Wells"
      ],
      "Exotic & High-Energy Materials": [
        "Subspace Energy Wells",
        "Holo-Crystal Cores",
        "Darkspin Turbines",
        "Zero-Point Extractors",
        "Quantum Flux Capacitors",
        "Aetheric Singularity Nodes",
        "Neutrino Funnel Strips",
        "Anti-Matter Dust Capsules",
        "Phase-Shifting Plasma Flasks",
        "Ion Storm Bottled Charges"
      ],
      "Storage & Conversion Systems": [
        "Kinetic Recharge Packs",
        "Thermal Accumulator Cells",
        "Holo-Capacitor Arrays",
        "Bio-Enzyme Power Converters",
        "Psionic Resonance Battery",
        "Graviton Compression Tanks",
        "Photoelectric Sponge Membranes",
        "Molecular Charge Coils",
        "Force-Etched Energy Condensers",
        "Regenerative Storage Shells"
      ]
    },
    "Luxury & Exotic Goods": {
      "Perfumes & Aromatics": [
        "Rare Perfumes",
        "Pheromone Extracts",
        "Void-Distilled Liquors (aromatic)",
        "Rose-Gel Incense Pods",
        "Jungle Orchid Fragrances",
        "Spice-Infused Resins",
        "Sulfuric Musk Oils",
        "Transcendent Floral Essences",
        "Pollen-Fog Mist Bottles",
        "Deep-Coral Essence Drops"
      ],
      "Fabrics, Textiles & Art Materials": [
        "Holo-Fabric Rolls",
        "Choral Silk Sheets",
        "Symphony-Gems (for jewelry craft)",
        "Aurora Glow Jewels",
        "Luminous Spider-Silk Threads",
        "Carved Ivory Petals",
        "Orbital Weave Tapestries",
        "Radiant Crystal Inlays",
        "Meteorite-Shard Cameos",
        "Phosphorescent Clay Statues"
      ],
      "Culinary & Esoteric Delicacies": [
        "Cerebral Wine",
        "Cloned Exotic Spices",
        "Psionic Artifacts (edible brain-coral)",
        "Starfruit Champagne",
        "Marrow-Nectar Shots",
        "Lunar Berry Compote",
        "Moss-Ferment Spirits",
        "Cosmic Sea Salt Flakes",
        "Frozen Nebula Candy",
        "Fey Honeydew Orbs"
      ],
      "Cultural & Artistic Artifacts": [
        "Holo-Paint Pigments",
        "Ancestral Carved Beads",
        "Runic Metal Artwork",
        "Force-Imbued Woodcarvings",
        "Historical Clay Scrolls",
        "Sun-Crested Metal Filigree",
        "Gem-Lit Choral Lamps",
        "Ceremonial Feather Headdresses",
        "Mosaic Memory Tiles",
        "Binary Verse Leaflets"
      ]
    },
    "Industrial Raw Materials": {
      "Structural Metals & Polymers": [
        "Heavy Polymers",
        "Refractory Alloys",
        "Nano-Fabric Base",
        "High-Tensile Monofilament Reels",
        "Aero-Grade Steel Sheets",
        "Vacuum-Hardened Beam Girders",
        "Hyperdense Tungsten Ingots",
        "Duraplast Panels",
        "Kinetic Absorption Mesh",
        "Pressure-Stone Bricks"
      ],
      "Electronic & Conductive Components": [
        "High-Conductivity Wire",
        "Smart Circuits",
        "Bio-Filament Threads",
        "Quantum Data Rods",
        "Crystal Phase Conductors",
        "Ion-Compliant Connector Grains",
        "Holo-Matrix Cores",
        "Subneural Chip Boards",
        "Nano-Fuse Transistors",
        "Photon-Flux Relays"
      ],
      "High-Temp & Specialty Substances": [
        "Armor-Grade Ceramics",
        "Heat Sink Carbon Blocks",
        "Plasma-Freeze Aerogels",
        "Radiation-Shielding Foams",
        "Magma-Forged Slag",
        "Electro-Hardening Fluids",
        "Thermal Shock Powders",
        "Crystalline Refractors",
        "Molecular Bond Adhesives",
        "Darkmatter-Resilient Coatings"
      ],
      "Chemical & Reactive Materials": [
        "Acidic Regolith Dust",
        "Corrosion-Resistant Lacquer",
        "Toxic Gas Capsules (for industrial use)",
        "Catalytic Enzyme Pellets",
        "Bio-Slurry Lubricants",
        "Oxygenation Bead Packs",
        "Ion-Exchange Resins",
        "Phase-Change Coolants",
        "Solar-Therm Catalyst Bars",
        "Geo-Extraction Salts"
      ]
    }
  },
  "Artifacts & Relics": {
    "Pre-Republic Artifacts": [
      "Ancient Starmaps",
      "Ornate Mask Relics",
      "Proto-Language Tablets",
      "Giant Stone Idols",
      "Obsolete Engine Parts",
      "Holo-Rune Charms",
      "Tributary Stele Shards",
      "Crystal Echo Diagrams",
      "Songsteel Drum Circles",
      "Old Republic Key Dials"
    ],
    "Force-Related Holocrons": [
      "Balance Holocron",
      "Knowledge Repository Cube",
      "Meditation Prism",
      "Lost Waystone",
      "Healer's Crystal Databank",
      "Star-Whisper Matrix",
      "Duality Logic Holocron",
      "Cosmic Resonance Cube",
      "Farsight Echo Sphere",
      "Force Harmony Index"
    ],
    "Sith & Dark Relics": [
      "Cursed Blade Shard",
      "Nightmare Talisman",
      "Obsidian Cipher Staff",
      "Whispering Helm",
      "Shadowbound Amulet",
      "Blood-Runed Tablet",
      "Soul-Tethering Ring",
      "Ember of Vengeance",
      "Hate-Wrought Sigil",
      "Toxin Veil Dagger"
    ],
    "Jedi & Light Relics": [
      "Wisdom Kyber Staff",
      "Song of Harmony Holoscroll",
      "Sun-Tempered Pendant",
      "Garden Seed Urn",
      "Holo-Chart of Peace",
      "Crystal Lattice Balm",
      "Starlit Yoke Fragment",
      "Unity Braid Bracelet",
      "Purity-Flow Amulet",
      "Celestial Feather Quill"
    ],
    "Mandalorian & Cultural Heirlooms": [
      "Clan Beskar Ingot",
      "Ancient War Horn",
      "Ceremonial Helm Crest",
      "Ancestral Shield Plate",
      "Runed Blade Fragment",
      "Clan Totem Carving",
      "Forge-Song Chain",
      "Honor Duel Token",
      "Holo-Record of Oaths",
      "Shield-Flare Insignia"
    ]
  },
  "Interstellar Events & Encounters": {
    "Diplomatic Summits": [
      "Peace Conference Dome",
      "Inter-Union Council",
      "Treaty Signing Ceremony",
      "Ambassadorial Dining Hall",
      "Cultural Exchange Pavilion",
      "Neutral Starboard Talks",
      "Factions' Harmony Summit",
      "Holo-Brokered Accord",
      "Trade Pact Exhibition",
      "Quarantine Border Meetings"
    ],
    "Trade & Commerce Fairs": [
      "Grand Market Expo",
      "Resource Auction Event",
      "Interstellar Trade Show",
      "Merchant Conference Orbital",
      "Artisan Guild Showcase",
      "Spice & Grain Festival",
      "Holo-Catalog Swap",
      "Multi-Guild Competition",
      "Fair-Trade Charter Signing",
      "Resource Sharing Bazaar"
    ],
    "War & Conflict Negotiations": [
      "Cease-Fire Discussion",
      "Concession Stand-Off",
      "Armistice Draft Meeting",
      "Neutral Mediator Venue",
      "Prisoner Exchange Grounds",
      "Holo-Arbitration Platform",
      "Witnessed Parley Fields",
      "Peace Stone Negotiation",
      "Clan Truce Lodge",
      "No-Fly Zone Forum"
    ],
    "Cultural & Artistic Exchanges": [
      "Holo-Opera Festival",
      "Cross-Species Music Workshop",
      "Language Symposium",
      "Historical Artifact Exhibition",
      "Philosophical Debate Forum",
      "Art Fusion Showcase",
      "Cuisine Fusion Night",
      "Holo-Tale Retelling",
      "Interfaith Ceremony",
      "Dances of the Nebula"
    ],
    "Exploratory & Research Missions": [
      "Deep-Core Survey Team",
      "Bio-Diversity Expedition",
      "Astro-Navigation Mapping",
      "Cosmic Phenomena Study",
      "Frontier Archeology Dig",
      "Terraform Test Flight",
      "Wormhole Stability Analysis",
      "Nebula Drift Sample Run",
      "Precursor Tech Excavation",
      "Graviton Field Scan"
    ]
  },
  "Socio-Political Issues & Themes": {
    "Colonization Conflicts": [
      "Indigenous Resistance",
      "Corporate Land Grabs",
      "Terraforming Disputes",
      "Resource Scarcity Uprising",
      "Cultural Preservation Efforts",
      "Anti-Assimilation Movement",
      "Clandestine Guerrilla Actions",
      "Ethical Settler Debates",
      "Migratory Safe Havens",
      "Repatriation Missions"
    ],
    "Resource Disputes & Crises": [
      "Ore-Rich Moon Rivalry",
      "Spice Harvest Limitation",
      "Water Scarcity Negotiations",
      "Fuel Hoarding Syndicates",
      "Environmental Degradation",
      "Credit Inflation Panics",
      "Quarantine Zone Blockades",
      "Unionized Worker Revolts",
      "Blackout Energy Shortages",
      "Asteroid Claim Wars"
    ],
    "Cultural Assimilation & Tension": [
      "Refugee Integration Strife",
      "Language Standardization Attempts",
      "Traditional Ritual Suppression",
      "Multi-Ethnic Council Debates",
      "Artistic Heritage Reclamation",
      "Xenophobic Isolation Cells",
      "Holo-Propaganda on Identity",
      "Caste-Barrier Challenges",
      "Heritage Archive Disputes",
      "Renegade Cultural Fusions"
    ],
    "Autonomous & Border Regions": [
      "Independent Frontier States",
      "Buffer Zone Settlements",
      "Unaligned Trading Worlds",
      "Self-Governing Stations",
      "Culturally Sovereign City-States",
      "Free-Trade Frontier Clans",
      "Interstice Habitat Republics",
      "Non-Aligned Planet Rings",
      "Orbital Baronies",
      "Confidential Border Pacts"
    ],
    "Inter-Species Relations": [
      "Treaties on Interbreeding",
      "Mutual Defense Pacts",
      "Cultural Rivalry Alliances",
      "Habitat Access Negotiations",
      "Historic Diplomatic Feuds",
      "Inter-Faith Gene Pools",
      "Mixed-Heritage Councils",
      "Xeno-Adoption Tribunals",
      "Shared Ritual Foundations",
      "Resource Co-Management"
    ]
  },
  "Underworld & Criminal Elements": {
    "Spice Cartels": [
      "Desert Spice Masters",
      "Coral Reef Refiners",
      "Urban Spice Cutters",
      "Black Market Additive Labs",
      "Overland Smuggling Routes",
      "Holo-Scent Spice Lounges",
      "Dune Cultivator Gangs",
      "Crystal Spice Craftsmen",
      "Cutthroat Flavor Syndicates",
      "Refinery Dealing Rings"
    ],
    "Pirate Crews & Gangs": [
      "Hyperspace Raiders",
      "Ion Net Trappers",
      "Canyon Hideout Gang",
      "Holo-Masked Marauders",
      "Tech-Scrapper Pirate Band",
      "Star Cloak Brigade",
      "Hull-Slicer Renegades",
      "Quantum Distortion Lurkers",
      "Force-Dampener Captors",
      "Star Chart Thieves"
    ],
    "Smuggler Rings & Networks": [
      "Shadowrunner Syndicate",
      "Encrypted Courier Group",
      "Stealth Freighter Chain",
      "Contraband Exchange Hub",
      "Borderline Runner Corps",
      "Bio-Compartmentalization Crew",
      "Chameleon Hull Runners",
      "Holo-Camouflage Freight",
      "Signal Jam Gangs",
      "Quiet Drift Operators"
    ],
    "Assassin Guilds": [
      "Poison Dart Circle",
      "Silent Holo-Blade Order",
      "Pressure-Point Masters",
      "Lightless Alley Killers",
      "Nano-Toxin Specialists",
      "Bio-Trace Hunters",
      "Holo-Shadow Stabbers",
      "Refraction Sniper Cabal",
      "Terror-Whisper Collective",
      "Cloaked Fang Syndicate"
    ],
    "Gambling Dens & Rackets": [
      "Holo-Casino Barges",
      "Credit Laundering Clubs",
      "Rigged Racing Events",
      "High-Stakes Dice Parlors",
      "Holographic Sports Betting",
      "Neural Pattern Casinos",
      "Exotic Beast Fight Rings",
      "Secret Auction Parlors",
      "Quantum Lottery Fraud",
      "Misinformation Betting Pools"
    ]
  },
  "Entertainment & Leisure": {
    "Holo-Dramas & Theater": [
      "Epic Saga Reenactments",
      "Multi-Species Improv Shows",
      "Ancient Myth Plays",
      "Interactive Holo-Stories",
      "Diplomatic Comedy Acts",
      "Bio-Sensory Theatrics",
      "Subspace Puppet Shows",
      "Holo-Virtual Operas",
      "Resonant Choral Dramas",
      "Avant-Garde Symbol Plays"
    ],
    "Sporting & Racing Events": [
      "Podracing Grand Prix",
      "Starfighter Acrobatics",
      "Void-Surfing Competition",
      "Asteroid Belt Obstacle Runs",
      "Rooftop Chase Challenges",
      "Zero-G Kickball Matches",
      "Pulse-Beam Fencing",
      "Sunspot Shield Games",
      "Wind Tunnel Races",
      "Undersea Current Sprints"
    ],
    "Gambling & Leisure Activities": [
      "Holo-Poker Tournaments",
      "Cultural Board Game Nights",
      "Psychic Guessing Matches",
      "Glitterstim Tasting Parlors",
      "Wormhole Roulette",
      "Reflection Pool Psychic Test",
      "Chorus Guessing Games",
      "Magnetic Disk Toss",
      "Miniature Galaxy Puzzles",
      "Crystal Ball Fortune Bets"
    ],
    "Exotic Zoos & Beast Shows": [
      "Bio-Dome Menageries",
      "Telepathic Creature Exhibits",
      "Undersea Beast Parades",
      "Migratory Swarm Viewing",
      "Singing Avian Concerts",
      "Mammoth Shell Caravans",
      "Pheromone Beast Displays",
      "Nocturnal Beast Glow Shows",
      "Symbiotic Beast Ballet",
      "Forest-Tamer Showcase"
    ],
    "Culinary Fairs & Markets": [
      "Interstellar Food Bazaar",
      "Fusion Cuisine Workshop",
      "Carnivorous Plant Tasting",
      "Sweet Syrup Festivals",
      "Aquatic Delicacy Sampling",
      "Bio-Vat Gourmet Stands",
      "Desert Fruit Contest",
      "Holo-Chef Cooking Battles",
      "Fermenter's Guild Showdown",
      "Herbal Spice Exchange"
    ]
  },
  "Agriculture & Terraforming": {
    "Hydroponic Farms": [
      "Vertical Greenhouse Towers",
      "Subsoil Nutrient Farms",
      "Bio-Lab Crop Domes",
      "Solar-Grown Grain Fields",
      "Gene-Tweaked Fruits",
      "Nutrient Misting Tubes",
      "Lunar Hydro-Core Gardens",
      "Narrowband Light Farms",
      "Crystal Siphon Vats",
      "Sporebed Columns"
    ],
    "Terraforming Projects": [
      "Atmosphere Enhancement Arrays",
      "Aquifer Drilling Operations",
      "Pollution Filter Forests",
      "Desert Greening Ops",
      "Climate Control Satellites",
      "Sunshadow Shield Deployments",
      "Polar Ice Seed Missions",
      "Tectonic Stabilizer Platforms",
      "Holo-Climate Integration",
      "Windshear Mitigation Systems"
    ],
    "Ranching & Herding": [
      "Flying Beast Pastures",
      "Wool Moth Farms",
      "Aquatic Coral Ranches",
      "Burrowing Herbivore Pens",
      "Swamp Lizard Herding",
      "Hover-Herd Tenders",
      "Ion-Bridled Creature Ranges",
      "Forest Vine Shepherds",
      "Mountain Grazer Terraces",
      "Bacta Field Livestock"
    ],
    "Gene-Edited Crops": [
      "Frost-Resistant Wheat",
      "Nutrient-Dense Tubers",
      "Light-Fed Fungal Mats",
      "Aroma-Enhanced Beans",
      "Insect-Proof Leafy Greens",
      "Solar-Plump Vines",
      "Sponge-Starch Berries",
      "Planet-Specific Rice Strains",
      "Liquid-Infused Seedpods",
      "Enzyme-Rich Oxygen Pods"
    ],
    "Sustainable Agricultural Movements": [
      "Biodiversity Initiatives",
      "Anti-GMO Debates",
      "Planetary Crop Rotation Pacts",
      "Organic Farming Enclaves",
      "Agri-Tech Research Labs",
      "Green Gene Councils",
      "Seed Share Networks",
      "Holo-Farmer Education",
      "Water-Recycling Guilds",
      "Interstellar Agri-Fair"
    ]
  },
  "Educational & Scholarly Institutions": {
    "Universities & Academies": [
      "Interdisciplinary Astro-Academy",
      "Cultural Exchange University",
      "Tech-Engineering Institute",
      "Holocron Study College",
      "Culinary Arts Conservatory",
      "Quantum Ethics Department",
      "Bio-Architectural School",
      "Diplomatic Training House",
      "Force Philosophy Institute",
      "Xeno-Medicine Campus"
    ],
    "Archives & Libraries": [
      "Galactic Archive Towers",
      "Ancient Scroll Depositories",
      "Holo-Text Vaults",
      "Encrypted Knowledge Banks",
      "Living Memory Gardens",
      "Mosaic Data Panels",
      "Rotating Codex Chambers",
      "Time-Seal Catalog Halls",
      "Language Fusion Hall",
      "Ancestral Scroll Banks"
    ],
    "Research & Development Labs": [
      "Cybernetic Enhancement Lab",
      "Subspace Physics Think-Tank",
      "Genome Decoding Facility",
      "Nano-Device Prototype Center",
      "Star Mapping Institute",
      "Holo-Architecture Labs",
      "Terraform Test Chambers",
      "Material Stress Research Node",
      "Biotech Pattern Incubator",
      "Anti-Gravity Trial Vault"
    ],
    "Force-Neutral Learning Centers": [
      "Psionic Sensitivity Schools",
      "Philosophical Debate Circles",
      "Diplomatic Etiquette Classes",
      "Mediation & Conflict Resolution Institutes",
      "Artisan Skill Workshops",
      "Universal History Salons",
      "Ritual Observation Groups",
      "Logic and Reason Guilds",
      "Skeptics’ Discussion Clubs",
      "Cultural Exchange Labs"
    ],
    "Artisan & Craft Guilds": [
      "Holo-Sculptor Cooperative",
      "Crystal-Carving Guild",
      "Shipwright Artisan Clan",
      "Glassblower Society",
      "Textile Pattern Designers",
      "Biomechanic Craft Circle",
      "Metal Engraving Alliance",
      "Bio-Luminescent Painter Dens",
      "Music Designer Collectives",
      "Ancient Masonry League"
    ]
  },
  "Medical & Biotechnology": {
    "Cloning Facilities": [
      "Gene Replication Vats",
      "Template Strain Repositories",
      "Quality-Controlled Clone Nurseries",
      "Custom Bio-Order Labs",
      "Hybrid Species Experiments",
      "Trait Stabilization Houses",
      "Memory Imprint Centers",
      "Adaptive Genetic Refineries",
      "Anti-Virus Clone Lines",
      "Species Revival Chambers"
    ],
    "Cybernetic Clinics": [
      "Neural Implant Salons",
      "Bionic Limb Fitting Rooms",
      "Sensory Upgrade Spas",
      "Memory Enhancement Pharmacies",
      "Holo-Vision Correction Units",
      "Synaptic Bridge Installers",
      "Morphology Adjustment Stations",
      "Bio-Tissue Integration Wings",
      "Muscle Strand Reinforcement Labs",
      "Cognitive Interface Parlors"
    ],
    "Genetic Engineering Centers": [
      "Trait Selection Farms",
      "Pathogen Immunization Labs",
      "Bio-Interface Engineers",
      "Agri-Gene Optimization Hubs",
      "Species Resurrection Projects",
      "Ocular Genome Editors",
      "Quantum Gene Linkers",
      "Enzyme Library Basins",
      "Climate-Adaptive Code Banks",
      "Adaptive Immunogen Labs"
    ],
    "Bacta & Healing Technologies": [
      "Bacta Tanks",
      "Regenerative Gel Packs",
      "Healing Crystal Chambers",
      "Nano-Med Injection Systems",
      "Soul-Soothing Frequencies",
      "Stasis Vial Carriers",
      "Nerve Regen Capsules",
      "Holo-Surgery Assistants",
      "Brainwave Calm Emitters",
      "Psyche Mending Rays"
    ],
    "Pandemic Responses & Health Protocols": [
      "Containment Quarantine Hubs",
      "Anti-Viral Field Generators",
      "Holo-Doctor Dispatches",
      "Migrant Health Clinics",
      "Interspecies Infection Control",
      "Hygiene Beacon Nets",
      "Multi-Zone Vaccination Drills",
      "Microscopic Filter Patrols",
      "Moral Triage Debates",
      "Bio-Hazard Sentinel Circles"
    ]
  },
  "Fashion & Clothing": {
    "Noble & High-Status Attire": [
      "Bejeweled Gowns",
      "High-Collar Regal Robes",
      "Holo-Fabric Regal Suits",
      "Embossed Armor Couture",
      "Cloaks of Starlight",
      "Kyber-Embellished Capes",
      "Crest-Inscribed Tunics",
      "Shimmering Veil Dresses",
      "Long-Train Ceremonial Gear",
      "Sun Glint Headbands"
    ],
    "Functional & Practical Wear": [
      "Multi-Pocket Vests",
      "Storm-Weather Tunics",
      "Subzero Insulation Jackets",
      "Desert Protective Wraps",
      "Terrain-Adaptive Boots",
      "Gravity Grip Gloves",
      "Vacuum Layer Bodysuits",
      "Reflective Sun Shawls",
      "Bio-Filter Breathing Masks",
      "Light-Absorbent Undersuits"
    ],
    "Trader & Spacer Garb": [
      "Smuggler's Utility Belt",
      "Pilot Flight Suits",
      "Dockworker Overalls",
      "Merchant Guild Sashes",
      "Spacer Patchwork Jackets",
      "Nav-Chart Shoulder Cloaks",
      "Holo-Beacon Vest Strips",
      "Compression Cargo Pants",
      "Ion-Pad Knee Guards",
      "Nutrient Pouch Harnesses"
    ],
    "Ceremonial & Ritual Robes": [
      "Temple Initiate Cloaks",
      "Wedding Harmony Wraps",
      "Festival Masked Garments",
      "Tribal Ancestral Shawls",
      "Chime-Embedded Attire",
      "Mosaic Talisman Vests",
      "Holi-Orb Embroidery",
      "Ritual Flame Sashes",
      "Crystal-Thread Kimonos",
      "Comet Feather Cloaks"
    ],
    "Tech-Infused Clothing": [
      "Stealth Fabric Suits",
      "Thermo-Regulating Hats",
      "Holo-Projecting Scarves",
      "Scent-Filtering Tunics",
      "Muscle-Support Leggings",
      "Quantum Weave Gloves",
      "Light-Frequency Helmets",
      "Electro-Absorbent Hoods",
      "Impact-Gel Knee Shields",
      "Sensor Reactive Bracelets"
    ]
  },
  "Philosophical & Ideological Movements": {
    "Pacifist Enclaves": [
      "Non-Aggression Communes",
      "Peacekeeping Mediators",
      "Harmonic Chanting Circles",
      "Conflict Resolution Farms",
      "Refuge for War-Worn",
      "Empathy Broadcasters",
      "Inner Balance Monasteries",
      "Voice of Calm Councils",
      "Daylight Harmonizers",
      "Holo-Diplomacy Circuits"
    ],
    "Expansionists & Colonizers": [
      "Terraform Advocate Groups",
      "Core-World Expansion Lobbyists",
      "Hyperlane Chart Crusaders",
      "Astro-Colonization Pioneers",
      "Pro-Resource Exploitation Circles",
      "Fast Frontier Settlers",
      "Bio-Colony Visionaries",
      "Pre-Emptive Claimers",
      "Stratified Terraform Clans",
      "Expansion Mandate Acolytes"
    ],
    "Anti-Technology Cults": [
      "Machine-Free Religious Sects",
      "Primitive Lifestyle Colonies",
      "Tech-Skeptic Librarians",
      "Signal-Jamming Monastics",
      "Bio-Purity Keepers",
      "Cavern Dwelling Primitives",
      "Tool Fasting Communities",
      "Holo-Blind Monks",
      "Cultural De-Mech Advocates",
      "Off-Grid Visionaries"
    ],
    "Environmental Guardians": [
      "Wildlife Sanctuary Defenders",
      "Anti-Pollution Vigilantes",
      "Reforesting Monks",
      "Coral Reef Saviors",
      "Biodiversity Wardens",
      "Gene-Pool Protectors",
      "Sustainable Harvest Circles",
      "Atmosphere Balancer Druids",
      "Eco-Holo Observers",
      "Water Cycle Preservers"
    ],
    "Merchant Libertarians": [
      "Free Trade Advocates",
      "Low-Tax Frontier Settlements",
      "Corporate Loophole Exploiters",
      "Minimalist Governance Traders",
      "Horizontal Supply Chain Collectives",
      "Credit Flow Liberators",
      "Tariff-Cutter Thinkers",
      "Black Market Sympathizers",
      "Profit Margin Purists",
      "De-Regulation Enthusiasts"
    ]
  },
  "Legal & Judicial Systems": {
    "Interstellar Courts": [
      "High Tribunal of Justice",
      "Neutral Arbitration Council",
      "Holo-Judge Forums",
      "Cross-Cultural Law Circle",
      "Precedent-Setting Jury",
      "Memory Archive Judges",
      "Harm Reduction Appeals",
      "Evidence Integrity Cabal",
      "Neural Witness Panels",
      "Code Balance Referees"
    ],
    "Planetary Lawkeepers": [
      "Desert Marshals",
      "Urban Peace Officers",
      "Highland Ranger Wardens",
      "Oasis Sheriffs",
      "Underground Vigilant Units",
      "Forest Peacebrokers",
      "Resource Compliance Agents",
      "Tundra Night Watch",
      "Holo-Footprint Trackers",
      "Gravity Lock Enforcers"
    ],
    "Tribal & Clan Justice": [
      "Council of Elders",
      "Totem-Based Verdicts",
      "Huntress Enforcers",
      "Bloodline Witnesses",
      "Rite-of-Passage Courts",
      "Ancestor Circle Judges",
      "Mediated Ritual Circles",
      "Folk Story Precedents",
      "Genealogy Claim Arbitrators",
      "Cultural Taboo Panels"
    ],
    "Corporate Enforcers": [
      "Contract Compliance Agents",
      "Loan Default Trackers",
      "Resource Quota Inspectors",
      "Brand Integrity Patrols",
      "Mercantile Fine Collectors",
      "Holo-Agreement Scrutinizers",
      "Quality Control Marshals",
      "Brand Image Taskforce",
      "Market Scarcity Monitors",
      "Security Token Guards"
    ],
    "Diplomatic Arbitration": [
      "Cross-Border Mediators",
      "Inter-Species Peace Panels",
      "Holo-Translator Judges",
      "Fair Treaty Interpreters",
      "Conflict De-Escalation Experts",
      "Mutual Understanding Circles",
      "Adaptive Law Synthesizers",
      "Value Reconciliation Committees",
      "Equity & Parity Arbiters",
      "Nodal Concord Builders"
    ]
  },
  "Transportation Infrastructure": {
    "Hyperspace Lanes": [
      "Major Trade Spine",
      "Secret Smuggler Shortcut",
      "Perilous Nebula Passage",
      "Frontier Expansion Route",
      "Anomaly-Dodging Channel",
      "Core-Branch Corridor",
      "Feeder Route Web",
      "Deep Core Drift Lane",
      "Quantum Slipway Path",
      "Cross-Sector Shortcut"
    ],
    "Gateways & Portals": [
      "Wormhole Stabilizers",
      "Gravity Well Ramps",
      "Quantum Gate Arrays",
      "Multi-Dimensional Folds",
      "Singularity Transfer Links",
      "Time-Shifted Passages",
      "Cosmic Key Arrays",
      "Folded Space Bridges",
      "Holo-Portal Axes",
      "Dimension Cleft Doors"
    ],
    "Local & Urban Transit": [
      "Air Tram Networks",
      "Maglev Underground Rails",
      "Suspension Bridge Cars",
      "Autonomous Sky Taxis",
      "Holo-Guide Station Kiosks",
      "Ion Glide Buses",
      "Soil Tube Freight Lines",
      "Cliffhanger Lift Pods",
      "Biolum Street Guides",
      "Gravity Dock Trams"
    ],
    "Intersector Ferries & Liners": [
      "Luxury Starliner",
      "Refugee Transport Ferry",
      "Resource Shuttle Convoy",
      "Diplomatic Envoy Ship",
      "Cultural Exchange Cruiser",
      "Agri-Ship Ferries",
      "Artisan Market Liners",
      "Void Boundary Ferries",
      "Long-Distance Passenger Haulers",
      "Border Crossing Vessels"
    ],
    "Subspace & Experimental Paths": [
      "Sub-Etheric Drift Lane",
      "Gravity Slingshot Corridor",
      "Dark Matter Transit Tube",
      "Pulsar Navigation Guides",
      "Holo-Ceiling Test Rails",
      "Phase-Shift Ferries",
      "Quantum Blink Rifts",
      "Waveform Overpass",
      "Intermittent Pulse Routes",
      "Dimension Echo Loops"
    ]
  },
  "Communication & Information": {
    "Holo-Net Infrastructure": [
      "Central Com Node",
      "Encrypted Relay Station",
      "Long-Distance Beacon Tower",
      "Quantum Info Router",
      "Sub-Orbital Datapad Hub",
      "Spectrum Mesh Spine",
      "Cloud-Density Relays",
      "Synapse Net Arrays",
      "Holo-Archive Towers",
      "Bio-Signal Conversion Nodes"
    ],
    "Encryption & Security": [
      "Quantum Key Exchange",
      "Memory Wipe Protocol",
      "Molecular Data Scrambler",
      "Time-Shifted Code Rings",
      "Holo-Chaff Signals",
      "Bio-Code Sequence Locks",
      "Multi-Layer Crypt Filters",
      "Neural Pattern Passkeys",
      "Data Isotope Stamps",
      "Spectral Frequency Shifters"
    ],
    "Propaganda & News Outlets": [
      "State Broadcast Channel",
      "Rogue Pirate Radio",
      "Underground News Holozine",
      "Misinformation Holograms",
      "Tech Corp PR Hubs",
      "Spin Cycle Feeds",
      "Censored Echo Outlets",
      "Value Narration Circles",
      "Force-View Journalism",
      "Holo-Whisper Rumors"
    ],
    "Astrography & Cartography": [
      "Star Chart Forge",
      "Cosmic Survey Drone",
      "Nebula Boundary Markers",
      "Archaic Map Tablets",
      "Holo-Recon Sphere",
      "Wormhole Marker Buoys",
      "Planetary Surface Scanners",
      "3D Spatial Plotting Cubes",
      "Time Drift Mappers",
      "Spectral Astrometry Tables"
    ],
    "Courier & Messenger Guilds": [
      "High-Speed Dispatch Riders",
      "Encrypted Data Runners",
      "Polite Courier Corps",
      "Cross-Sector Messenger Drones",
      "Fair-Delivery League",
      "Stealth Drop Pods",
      "Sunbeam Note Passers",
      "Bio-Letter Carriers",
      "Quantum Packet Droppers",
      "Nebula Runner Services"
    ]
  },
  "Ecological & Environmental Management": {
    "Conservation Efforts": [
      "Endangered Species Sanctuaries",
      "Reforestation Projects",
      "Coral Reef Restoration",
      "Fauna Reintroduction",
      "Planetary Park Systems",
      "Gene Memory Seed Vaults",
      "Arboreal Whisper Exchanges",
      "Holo-Bee Pollinator Farms",
      "Undersea Choral Shelters",
      "Ionic Wind Purifiers"
    ],
    "Wildlife Preserves": [
      "Migratory Bird Shelters",
      "Insect Hive Domes",
      "Forest Canopy Refuges",
      "Deep Sea Creature Havens",
      "Arboreal Conservation Sphere",
      "Radiant Reef Keepers",
      "Cavern Echo Parks",
      "Glacier Beast Sanctuaries",
      "Petal Grove Nests",
      "Marsh Filtered Reserves"
    ],
    "Engineered Ecosystems": [
      "Bio-Fabricated Gardens",
      "Climate-Controlled Biospheres",
      "Habitat Simulation Zones",
      "Aqua-Terra Blends",
      "Soil Chemistry Labs",
      "Holo-Forest Simulation",
      "Elemental Harmony Zones",
      "Seed Convergence Chambers",
      "Marine Genome Boards",
      "Multi-Fauna Creches"
    ],
    "Pollution Control & Cleanup": [
      "Toxic Waste Neutralizers",
      "Carbon Capture Towers",
      "Waste Recycling Plants",
      "Floating Oil-Eater Clouds",
      "Radiation Shield Arrays",
      "Acid Rain Deflectors",
      "Ion Field Scrubbers",
      "Bio-Remediation Tanks",
      "Holo-Clean Blueprint Labs",
      "Spore-Pollen Stabilizers"
    ],
    "Resource Balancing Initiatives": [
      "Asteroid Mine Quotas",
      "Seasonal Fishery Limits",
      "Sustainable Logging Pacts",
      "Energy Rationing Polices",
      "Conscious Crop Rotation",
      "Harvest Timing Schedules",
      "Load-Balancing Storage Nets",
      "Hydro-Well Distribution",
      "Nutrient Equity Boards",
      "Resource Rotation Councils"
    ]
  },
  "Rituals & Ceremonies": {
    "Coming-of-Age Rites": [
      "Star-Gazing Vigil",
      "Hunter's Moon Trial",
      "Artisan's First Craft Ceremony",
      "Village Mentor Naming",
      "Ancestral Blood Oath",
      "Holo-Reflection Passage",
      "Crystallization Feat Test",
      "Root Festival Bonding",
      "Aurora Witness Blessing",
      "Sand Circle Footprint Rite"
    ],
    "Marriage & Union Ceremonies": [
      "Bonding Light Orb Exchange",
      "Confluence of Life Song",
      "Shared Harvest Feast",
      "Dual Mask Unveiling",
      "Holo-Vow Synchronization",
      "Water-Chime Blessings",
      "Starfall Lattice Ceremony",
      "Sun-Clarion Hymn",
      "Parallel Path Binding",
      "Wind Petal Union"
    ],
    "Harvest & Seasonal Festivals": [
      "Moth Emergence Day",
      "Crystal Bloom Season",
      "Solar Alignment Feast",
      "Wind Dance Ritual",
      "Rainfall Gratitude Gathering",
      "Seed Cycle Jubilee",
      "Fertility Convergence Rite",
      "Comet Bloom Celebrations",
      "Flood Recession Day",
      "Fungal Glow Harvest"
    ],
    "Warrior & Honor Ceremonies": [
      "Blade Forging Rite",
      "Honor Duel Recognition",
      "Ancestral Armor Fitting",
      "Scar Inscription Ritual",
      "Clan Crest Dedication",
      "Trophy Echo Drums",
      "Victory Holo-Disk Display",
      "Fealty Cord Exchange",
      "Moonsteel Lance Ritual",
      "Winged Banner Elevation"
    ],
    "Memorial & Remembrance": [
      "Candle Moon Vigil",
      "Ancestor Holo-Projections",
      "Naming Stars for Fallen",
      "Bone-Flute Elegy",
      "Whispering Grove Visit",
      "Silent Flame Beacon",
      "Echo Chamber Testimonials",
      "Comet Ash Scattering",
      "Nebula Reef Memorial",
      "Lamentation Wind Harps"
    ]
  },
  "Corporate & Industrial Powerhouses": {
    "Droid Manufacturers": [
      "Precision Droid Fabricators",
      "Multi-Purpose Automaton Forge",
      "Luxury Servant Droid Brand",
      "Combat Droid Specialist Firm",
      "Astromech Innovation Labs",
      "Bio-Mech Integration Foundry",
      "Memory Core Optimizers",
      "Holo-Interface Servitors",
      "Refurbishment Drone Factories",
      "Nano-Assembler Companies"
    ],
    "Starship Conglomerates": [
      "Core Shipwright Guild",
      "Custom Cruiser Workshops",
      "Mass-Production Frigate Line",
      "Artisanal Yacht Builders",
      "Freighter Efficiency Labs",
      "Adaptive Hull Innovators",
      "Modular Engine Founders",
      "Armored Hull Masterworks",
      "High-Grade Shield Smiths",
      "Seamless Hyperdrive Forgers"
    ],
    "Energy & Fuel Corporations": [
      "Fusion Core Refiners",
      "Tibanna Gas Extractors",
      "Solar Converter Firms",
      "Geo-Thermal Tap Exploiters",
      "Ion Battery Merchants",
      "Quantum Dynamo Foundries",
      "Bio-Fuel Synth Centers",
      "Holo-Reactor Designers",
      "Zero-Point Brokerages",
      "Energy Node Cooperatives"
    ],
    "Terraforming Enterprises": [
      "Atmosphere Balancer Ltd.",
      "Climate Sculptor Corp",
      "Hydro-Expander Inc.",
      "Desert Bloom Solutions",
      "Arctic Melt Managers",
      "Seismic Stabilization Corp",
      "Spore-Seedling Industries",
      "Luminosity Control Networks",
      "Gravity Tuner Contractors",
      "Enviro-Regulator Holdings"
    ],
    "AI & Droid Intelligence R&D": [
      "Cognitive Uplink Centers",
      "Memory Algorithm Workshops",
      "Holo-Cognitive Think Tanks",
      "Gen-7 Droid Brain Designers",
      "Adaptive Learning Labs",
      "Bio-Synapse Code Writers",
      "Quantum Thought Arrays",
      "Data Emotion Imprinters",
      "Moral Logic Designers",
      "Rationality Test Servers"
    ]
  },
  "Survival & Frontier Elements": {
    "Frontier Settlements": [
      "Harsh Desert Colony",
      "Tundra Survival Hub",
      "Jungle Edge Farmstead",
      "Swamp Dock Village",
      "Volcanic Mining Hamlet",
      "Highland Grazer Camp",
      "Aqua-Glacier Fishing Nest",
      "Windblown Cliff Hamlet",
      "Marsh Reed Houses",
      "Nebula Mist Clearing"
    ],
    "Scavenger Societies": [
      "Wreck Salvage Crews",
      "Bone Picker Camps",
      "Junk Asteroid Colonies",
      "Abandoned Station Looters",
      "Drift Belt Harvesters",
      "Ion Scrap Gatherers",
      "Ship Breaker Guilds",
      "Data Core Recycler Clans",
      "Metallurgic Patchers",
      "Ruin Dweller Bazaars"
    ],
    "Nomadic Traders": [
      "Wandering Merchant Ships",
      "Caravan of Barges",
      "Planet-Hopping Bargain Seekers",
      "Mobile Market Sphere",
      "Roaming Festival Barges",
      "Holo-Troupe Caravans",
      "Transit Slipway Traders",
      "Relic Exchange Flotillas",
      "Cargo Drop Collectives",
      "Liminal Border Swappers"
    ],
    "Pirate Havens": [
      "Asteroid Rim Refuge",
      "Hidden Nebula Ports",
      "Uncharted Lagoon Base",
      "Defunct Station Sanctum",
      "Holo-Cloaked Fortress",
      "Quarantine Zone Hideout",
      "Gas Giant Drifter Hub",
      "Coral Reef Underport",
      "Gravity Debris Lair",
      "Refraction Field Encampment"
    ],
    "Hidden Enclaves & Safehouses": [
      "Subterranean Cavern Town",
      "Ice Crevasse Shelter",
      "Dense Jungle Retreat",
      "Abandoned Freighter Hideout",
      "Holo-Camouflaged Hut",
      "Fog-Shrouded Retreat",
      "Moss-Covered Mountain Nook",
      "Nomad Cliff Burrow",
      "Under-Bridge Refuge",
      "Rubble Pile Sanctuary"
    ]
  },
  "Diplomacy & Intercultural Relations": {
    "Ambassadorial Missions": [
      "Language Exchange Envoys",
      "Resource Sharing Delegations",
      "Cultural Tour Emissaries",
      "Peace Temple Aides",
      "Conflict Mediator Teams",
      "Heritage Appreciation Groups",
      "Trade Harmony Champions",
      "Alliance Petitioners",
      "Translational Scribes",
      "Cross-Value Liaisons"
    ],
    "Peace Treaties & Alliances": [
      "Non-Aggression Pact Signings",
      "Resource Equilibrium Deals",
      "Inter-Faith Understanding Charters",
      "Border Neutralization Accords",
      "Warp Beacon Access Trades",
      "Mutual Defense Vows",
      "Holo-Witnessed Armistices",
      "Détente Handbook Exchanges",
      "Cross-Guild Concords",
      "Harmony Token Swaps"
    ],
    "Cultural Liaisons & Interpreters": [
      "Multi-Lingual Counselors",
      "Symbol Decoding Experts",
      "Taboo Negotiation Guides",
      "Cultural Signal Advisors",
      "Cross-Value Mediators",
      "Holo-Etiquette Tutors",
      "Contextual Gesture Readers",
      "Heritage Code Translators",
      "Value Gap Bridge Teams",
      "Ritual Explanation Circles"
    ],
    "Non-Aggression & Neutral Zones": [
      "Demilitarized Sectors",
      "Cultural Heritage Stations",
      "Trade Route Safe Corridors",
      "Refugee Protection Worlds",
      "Pilgrimage Neutral Grounds",
      "Co-Managed Mining Zones",
      "Open Diplomacy Fields",
      "Long Peace Borderlands",
      "Neutral Arbitration Moons",
      "Conflict-Free Gateways"
    ],
    "Intercultural Summits & Fairs": [
      "Multi-Species Friendship Day",
      "Diversity Celebration Carnivals",
      "Holoculture Exchange Hubs",
      "Peaceful Debate Forums",
      "Memory Sharing Rituals",
      "Shared Language Songfests",
      "Inter-Guild Diplomatic Picnic",
      "Dual-Tradition Ceremonies",
      "Heritage Tale Exchanges",
      "Poly-Cuisine Banquets"
    ]
  },
  "Cosmic & Astronomical Features": {
    "Binary & Multiple Star Systems": [
      "Twin-Sun Oases",
      "Triple-Star Cascade",
      "Quadruple Beacon System",
      "Helix Orbit Patterns",
      "Balanced Gravity Twins",
      "Nested Orbit Clusters",
      "Waveform Star Alignments",
      "Chained Solar Arrays",
      "Resonant Stellar Triplets",
      "Spiral Link Star Web"
    ],
    "Rogue & Wandering Planets": [
      "Starless Void World",
      "Nomad Planet Oasis",
      "Comet-Trail Following Sphere",
      "Refugee Planet Harbor",
      "Hidden Gravity Sink",
      "Cloaked Nebula Drifter",
      "Bare Core Wanderer",
      "Chilled Ember Sphere",
      "Spectrum Glow Roamer",
      "Solar Runaway Orb"
    ],
    "Hyperspace Anomalies": [
      "Quantum Flux Rifts",
      "Time-Dilating Pocket",
      "Gravity Inversion Loop",
      "Subspace Echo Corridor",
      "Reality Tear Aperture",
      "Holo-Horizon Distortion",
      "Dimension Slip Fault",
      "Temporal Phase Beacon",
      "Wormhole Echo Chamber",
      "Cosmic Mirage Lens"
    ],
    "Rare Comet Showers & Events": [
      "Holo-Tail Comet",
      "Rainbow Ion Comet",
      "Resource-Rich Icy Comet",
      "Biannual Crystal Comet Pass",
      "Sun-Skipping Fire Comet",
      "Cobalt Dust Storm Comet",
      "Spore-Seeding Comet Spray",
      "Fission Fragment Comet",
      "Holo-Reflective Comet Chain",
      "Wind Song Comet Revel"
    ],
    "Black Holes & Neutron Stars": [
      "Graviton Well Core",
      "Supermassive Black Hole Hub",
      "Neutron Star Beacon",
      "Event Horizon Lighthouses",
      "Dark Matter Orb Dwelling",
      "Axion Whisper Wells",
      "Stellar Collapse Remnants",
      "Hawking Radiation Springs",
      "Gravity Singularity Nett",
      "Horizon Distortion Fields"
    ]
  }
}
</code>

./resources/dnd_categories.json
<code>
{
  "Items": {
    "Weapons & Armor": {
      "Melee Weapons": [
        "Simple Melee Weapon", "Martial Melee Weapon", "Heavy Blade", "Light Blade", "Polearm", "Hammer", "Mace", "Axe", "Spear", "Exotic Melee Weapon"
      ],
      "Ranged Weapons": [
        "Short-Range Projectile Weapon", "Long-Range Bow", "Crossbow Variant", "Thrown Weapon", "Sling", "Repeating Projectile Weapon"
      ],
      "Armor Pieces": [
        "Light Armor", "Medium Armor", "Heavy Armor", "Chain Armor", "Plate Armor", "Leather Armor", "Helmet", "Gauntlets", "Greaves", "Shield"
      ],
      "Shields": [
        "Buckler", "Light Shield", "Heavy Shield", "Tower Shield", "Magical Shield"
      ],
      "Generic Weapon": [
        "Common Weapon", "Enchanted Weapon", "Masterwork Weapon", "Ornate Weapon"
      ]
    },
    "Magical & Consumables": {
      "Potions": [
        "Healing Potion", "Stealth Potion", "Enhancement Potion", "Resistance Potion", "Elemental Potion", "Stamina Potion", "Vision Potion"
      ],
      "Scrolls": [
        "Basic Spell Scroll", "Offensive Spell Scroll", "Defensive Spell Scroll", "Utility Spell Scroll", "Summoning Spell Scroll", "Illusion Spell Scroll", "Transmutation Spell Scroll"
      ],
      "Wands": [
        "Basic Wand", "Healing Wand", "Control Wand", "Elemental Wand", "Silencing Wand", "Summoner's Wand", "Illusionist's Wand"
      ],
      "Magic Items": [
        "Container Magic Item", "Protective Magic Item", "Enhancement Magic Item", "Transformative Magic Item", "Communication Magic Item", "Transportation Magic Item"
      ],
      "Spell Foci": [
        "Arcane Focus", "Divine Focus", "Elemental Focus", "Runic Focus", "Natural Focus", "Psychic Focus"
      ],
      "Ritual Components": [
        "Rare Incense", "Special Ink", "Sacred Candle", "Etheric Powder", "Fine Chalk", "Mystic Herbs"
      ],
      "Herbs": [
        "Medicinal Herb", "Poisonous Herb", "Rare Plant", "Aromatic Herb", "Arcane-Infused Herb", "Stimulant Herb", "Relaxant Herb"
      ]
    },
    "Valuables & Currency": {
      "Currency": [
        "Generic Coins", "Trade Bars", "Precious Metal Ingots", "Standardized Tokens", "Shell Currency", "Beaded Trade Tokens"
      ],
      "Gems": [
        "Common Gem", "Precious Gem", "Semi-Precious Gem", "Rare Crystal", "Elemental Stone", "Mystic Gem"
      ],
      "Art Objects": [
        "Fine Artwork", "Decorative Piece", "Intricate Carving", "Artisanal Craft", "Cultural Artifact", "Ornate Sculpture"
      ],
      "Relics": [
        "Ancient Relic", "Sacred Relic", "Cultural Heirloom", "Mystic Artifact", "Legendary Token"
      ],
      "Talismans": [
        "Protective Talisman", "Guiding Talisman", "Elemental Talisman", "Cursed Talisman", "Healing Talisman"
      ],
      "Ornaments": [
        "Decorative Ornament", "Ceremonial Ornament", "Exotic Ornament", "Symbolic Ornament", "Festive Ornament"
      ],
      "Runes": [
        "Protection Rune", "Elemental Rune", "Communication Rune", "Binding Rune", "Illusion Rune", "Enhancement Rune"
      ]
    },
    "Tools & Misc": {
      "Books & Writing": [
        "Cooking Book", "Spellbook", "Research Journal", "Travel Log", "Cultural Codex", "Common Notebook", "Tactical Guide", "Genealogical Record"
      ],
      "Adventuring Gear": [
        "Rope", "Lantern", "Backpack", "Cooking Utensil", "Lockpick Set", "Grappling Hook", "Tent", "Bedroll", "Waterskin", "Flint & Steel", "Signal Whistle", "Cartographer's Tools", "Musical Instrument"
      ]
    },
    "Wearables & Accessories": {
      "Jewelry & Adornments": [
        "Signet Ring", "Amulet", "Necklace", "Bracelet", "Earrings", "Brooch", "Charm", "Decorative Hairpin"
      ],
      "Apparel & Gear": [
        "Bracer", "Mask", "Cloak", "Boots", "Gloves", "Hat", "Belt", "Tunic", "Hood", "Robe", "Sash"
      ]
    }
  },
  "Characters": {
    "Commonfolk & Professions": [
      "Farmer", "Hunter", "Fisher", "Merchant", "Blacksmith", "Baker", "Miller", "Shepherd", "Weaver", "Tailor", "Tanner", "Innkeeper", "Miner", "Mason", "Carpenter", "Leatherworker", "Potter", "Brewer", "Butcher", "Cook", "Herbalist", "Scribe", "Messenger", "Guardsman", "Stablehand", "Servant", "Furrier", "Chandler", "Ropemaker", "Cartwright"
    ],
    "Adventurers & Heroes": [
      "Warrior", "Wizard", "Cleric", "Rogue", "Ranger", "Barbarian", "Druid", "Bard", "Paladin", "Sorcerer", "Monk", "Warlock", "Knight", "Swashbuckler", "Spellblade", "Witch", "Shaman", "Inquisitor", "Crusader", "Alchemist", "Psion", "Artificer"
    ],
    "Antagonists & Criminals": [
      "Bandit", "Thief", "Assassin", "Cultist", "Pirate", "Smuggler", "Crime Lord", "Dark Knight", "Mad Alchemist", "Poisoner", "Kidnapper", "Warlord", "Corrupt Official", "Graverobber"
    ],
    "Authority & Nobility": [
      "Noble", "Lord/Lady", "Baron/Baroness", "Duke/Duchess", "King/Queen", "Prince/Princess", "Chancellor", "Vizier", "Senator", "Diplomat", "Court Advisor", "Judge", "Magistrate", "Tax Collector", "Steward", "Chamberlain"
    ],
    "Organizations & Affiliations": [
      "Guild Member", "Faction Agent", "Religious Acolyte", "Military Officer", "Secret Society Operative", "Merchant Consortium Representative", "Arcane Circle Adept", "Knightly Order Member", "Adventurer's Guild Recruit", "Scholars' Association Researcher", "Monastic Disciple", "Witch Coven Initiate"
    ]
  },
  "Creatures": {
    "Common Monsters": [
      "Beast", "Animal Predator", "Vermin Swarm", "Humanoid Raider", "Simple Undead", "Goblin-like Creature", "Reptilian Humanoid", "Insectoid Creature"
    ],
    "Powerful Beings": [
      "Dragon", "Giant", "Fiend", "Celestial", "Elder Elemental", "Legendary Beast", "Vampiric Entity", "Ancient Undead Lord", "Titanic Monster"
    ],
    "Legendary & Mythic": [
      "Chimera", "Griffon", "Sphinx", "Hydra", "Phoenix", "Mythic Serpent", "Ancient Treant", "Colossal Turtle"
    ],
    "Intelligent Threats": [
      "Aberrant Mind Creature", "Beholder-Like Entity", "Serpentine Humanoid Caster", "Fey Courtier", "Dark Elf", "Aboleth-like Creature", "Rakshasa-like Entity"
    ],
    "Undead & Constructs": [
      "Common Undead (Skeleton, Zombie)", "Spirit Entity (Ghost, Wraith)", "Animated Construct (Golem)", "Corporeal Undead (Ghoul, Mummy)", "Lich-Spawned Creature"
    ]
  },
  "Locations": {
    "Settlements & Civilized Areas": [
      "City", "Town", "Village", "Hamlet", "Trading Post", "Marketplace", "Harbor", "Inn", "Tavern", "Guildhall", "Fortress", "Keep", "Palace", "Manor House"
    ],
    "Adventure Sites": [
      "Dungeon", "Ruined Keep", "Haunted House", "Arcane Tower", "Abandoned Mine", "Bandit Hideout", "Cavernous Lair", "Forgotten Tomb", "Deserted Temple", "Secret Laboratory"
    ],
    "Religious & Spiritual": [
      "Temple", "Shrine", "Sacred Grove", "Catacomb", "Crypt", "Monastery", "Pilgrimage Site", "Oracle's Cave", "Holy Well"
    ],
    "Social & Cultural": [
      "Theater", "Arena", "Brothel", "Library", "University", "Music Hall", "Courthouse", "Bathhouse", "Cultural Plaza", "Festival Grounds"
    ],
    "Wilderness & Remote": [
      "Druid Grove", "Dense Forest", "Mountain Pass", "Underwater Realm", "Floating Island", "Desert Oasis", "Jungle Ruins", "Mist-Shrouded Swamp", "Highland Plateau"
    ]
  },
  "Story Elements": {
    "Narrative Hooks": [
      "Quest", "Rumor", "Treasure Map", "Mysterious Letter", "Prophetic Dream", "Strange Disappearance", "Local Legend", "Long-Standing Feud", "Rivalry"
    ],
    "Cultural & Political": [
      "Diplomatic Mission", "Trade Negotiation", "Conspiracy", "Rebellion", "Royal Succession", "Cultural Exchange", "Border Dispute", "Secret Alliance"
    ],
    "Historic & Mythic": [
      "Ancient Prophecy", "Lost Civilization", "Epic Poem", "Old War", "Mythic Ritual", "Inheritance", "Historic Feud", "Forgotten Deity"
    ],
    "Conflict & Cataclysm": [
      "Cataclysm", "Great Storm", "Famine", "Plague", "Artifact Hunt", "Invasion", "Erupting Volcano", "Undead Uprising", "Draconic Incursion"
    ],
    "Mystical & Unusual Events": [
      "Eclipse", "Divine Intervention", "Ghostly Apparition", "Wish Granting", "Moral Dilemma", "Arcane Experiment", "Planar Convergence", "Strange Phenomenon"
    ]
  },
  "Worldbuilding": {
    "Political Entities": [
      "Empire", "Kingdom", "Republic", "Confederation", "Nomadic Tribe", "City-State", "Dwarven Stronghold", "Elven Enclave", "Orcish Horde"
    ],
    "Cultural & Social Structures": [
      "Culture", "Tradition", "Festival", "Merchant Guild", "Artisan Collective", "Warrior Clan", "Academic Society", "Religious Order", "Trade Caravan Network"
    ],
    "Religious & Arcane Orders": [
      "Deity", "Pantheon", "Druidic Circle", "Knightly Order", "College of Mages", "Necromantic Cabal", "Cult of Old Gods", "Elemental Brotherhood"
    ],
    "Geographical/Planar": [
      "Prime Material Plane", "Elemental Realm", "Undersea Kingdom", "Floating Island Nation", "Hollow Earth Domain", "Astral Sea", "Feywild", "Shadowfell"
    ],
    "Key Landmarks & Wonders": [
      "Great Library", "World Tree", "Primordial Forge", "Sacred Mountain", "Standing Stones", "Crystal Spire", "Hanging Gardens", "Grand Canal", "Ancient Lighthouse"
    ]
  },
  "Character Options": {
    "Lineage & Heritage": [
      "Race", "Bloodline", "Heritage", "Cultural Background", "Elemental Ancestry", "Draconic Lineage", "Fey-Touched Heritage", "Celestial Origin"
    ],
    "Class & Specializations": [
      "Class", "Archetype", "Martial Tradition", "School of Magic", "Divine Domain", "Pact Boon", "Fighting Style", "Psionic Discipline", "Totem Spirit", "Artisan Specialty"
    ],
    "Background & Social Standing": [
      "Commoner", "Noble", "Guild Member", "Soldier", "Scholar", "Wanderer", "Outlander", "Courtier", "Criminal", "Entertainer", "Hermit", "Merchant", "Acolyte", "Sailor"
    ],
    "Magic & Power Sources": [
      "Spell", "Metamagic Option", "Eldritch Invocation", "Sorcerous Origin", "Warlock Patron", "Channel Divinity", "Spiritual Totem", "Arcane Invention"
    ],
    "Additional Customization": [
      "Racial Trait", "Cultural Trait", "Monastic Tradition", "Bardic College", "Ranger Conclave", "Druidic Circle", "Barbarian Path", "Specialized Feat", "Minor Boon"
    ]
  },
  "Traps/Hazards": {
    "Mechanical Traps": [
      "Pit Trap", "Dart Trap", "Falling Block Trap", "Swinging Blade Trap", "Pressure Plate Puzzle", "Weighted Net Trap", "Whirring Sawblade Mechanism"
    ],
    "Magical Traps": [
      "Explosive Rune Trap", "Magic Glyph Trap", "Illusionary Floor", "Soul Drain Rune", "Telekinetic Field Trap", "Elemental Ward"
    ],
    "Environmental Hazards": [
      "Quicksand", "Acid Pool", "Freezing Mist", "Burning Coals", "Toxic Spores", "Volcanic Vent", "Collapsing Ice Shelf"
    ],
    "Mind-Bending Challenges": [
      "Hall of Mirrors", "Time Loop Trap", "Maddening Whispers", "Sentient Puzzle Box", "Dream Maze", "Shifting Labyrinth"
    ],
    "Complex Encounters": [
      "Skill Challenge", "Shifting Sands Puzzle", "Siren's Song Hazard", "Gravity Inversion Room", "Enchanted Chains", "Living Chessboard"
    ]
  },
  "Events/Encounters": {
    "Social Gatherings": [
      "Diplomatic Summit", "Noble Banquet", "Masquerade Ball", "Bardic Competition", "Harvest Gala", "Cultural Festival", "Great Market Day"
    ],
    "Conflict & Combat": [
      "Monster Ambush", "Bandit Raid", "Arena Challenge", "Gladiatorial Games", "Street Brawl", "Noble Duel", "Skirmish with Invaders"
    ],
    "Cultural & Seasonal": [
      "Harvest Festival", "Royal Wedding", "Cultural Exchange Fair", "Midwinter Festival", "Great Bazaar", "Seasonal Ritual", "Pilgrimage Parade"
    ],
    "Mysterious & Supernatural": [
      "Ghostly Visitation", "Fey Carnival", "Astral Alignment", "Portal Opening", "Rain of Strange Creatures", "Displaced Spirits", "Twilit Revel"
    ],
    "High-Stakes Situations": [
      "Heist", "Inquisitorial Inspection", "Exotic Beast Show", "Trade Caravan Arrival", "Prophetic Reading", "Secret Auction", "Siege Negotiation"
    ]
  }
}
</code>

./services/prompt_templates.py
<code>
BASE_PROMPT = """
You are an RPG content generator for {system}, set in {setting}. You help lazy DMs generate rich and diverse content. 
You will produce strictly valid JSON that describes any of ({content_type}) influenced by {context} themes. 
Ensure an appropriate name is chosen. Low level items should be generic in name, unimpressive and mundane. 
Not all items are useful or positive in effect. Items can have costs or penaltys for use, particularly powerful items.

Follow these rules:
- Return only raw JSON, no markdown code fences or extra commentary.
- The JSON must be valid per RFC 8259.
- Include a "name" field and a "description" field. 
- Name and description have the highest priority and should be listed first.
- Flatten all properties. Avoid nested objects if possible. If you must use nested objects, flatten them into strings.
- Each property in the JSON schema is assigned an integer "ui_order" field. 
  "name" has ui_order=1, "description"=2, and then assign ui_order=3,4,... to other fields by priority of importance.
- Sort the final JSON properties by ui_order. The final JSON must have fields in ascending ui_order order.
- Integer values must be integers, strings in double-quotes, etc. No trailing commas.

Your output:
A single JSON object with fields ordered by their ui_order, strictly valid JSON, and no additional text.

Schema:

{schema}
"""

SCHEMA_PROMPT = """
You are an RPG content generator for {system}, set in {setting}. Provide a JSON schema (draft-07) that describes {content_type} objects influenced by {context}, following these rules:
- Return only raw JSON, no markdown code fences or extra commentary.
- The schema must be a single JSON object and strictly valid per the schema provided, do not deviate.
- Include "name" (type=string, ui_order=1) and "description" (type=string, ui_order=2) as required properties, always.
- Include ui_order as an integer for each property in the schema's "properties" definitions. 
- Additional properties should also have ui_order assigned incrementally (3,4,...), sorted by their informative priority.
- Properties should be as flat as possible. Avoid nested objects. If necessary, just define them as strings.
- Disallow additional properties by setting "additionalProperties": false.
- No code fences or markdown formatting, just the raw JSON schema.

Schema:

{schema}
"""

FULL_STATBLOCK_PROMPT = """
{statblock_stats}

You are an RPG content generator for {system}, set in {setting}. Convert the above information into a fully detailed JSON object describing a {content_type} influenced by {context}, including all relevant stats, flavor, and details for a D&D 3.5e campaign. 
Follow these rules:
- Return only raw JSON, no markdown code fences or extra commentary.
- Ensure data and their types are absolutely correct. Digits with no strings should be an int type.
- Conform to the previously defined JSON schema (including ui_order).
- "name" ui_order=1, "description" ui_order=2.
- Include other fields with assigned ui_order, sorted accordingly.
- Flatten data: no complex nested objects. 
- The output must be strictly valid JSON with a single top-level object.
"""
</code>

./services/__init__.py
<code>
</code>

./services/schema_service.py
<code>
import asyncio
import json
import os
import random
import time
from jsonschema import Draft7Validator, ValidationError
from functools import lru_cache
from src.models.content_parser import ContentParser
from src.services.file_manager import FileManager
from src.services.gpt_service import GPTService
from src.services.logger import logger
from src.services.prompt_templates import SCHEMA_PROMPT
from src.utils import load_config


class SchemaService:
    def __init__(self):
        self.config = load_config("src/config/config.json")
        self.gpt_service = GPTService()
        self.parser = ContentParser()
        self.retry_count = self.config["app-settings"].get("llm_retry_count", 3)
        self.retry_delay = self.config["app-settings"].get("llm_retry_delay", 2)
        self.schema_enabled = self.config["schema-validation"].get("enable", False)
        self.schema_prompt_template = FileManager().load_default_schema()
        self.default_schema_path = self.config["schema-validation"].get("default_schema", "")
        self._schema_cache = {}

    async def get_schema(self, content_type, context_str):
        if not self.schema_enabled:
            return self._load_default_schema()

        key = (content_type.lower().strip(), context_str.lower().strip())
        if key in self._schema_cache:
            return self._schema_cache[key]

        schema = await self._fetch_schema_from_llm(content_type, context_str)

        if not schema:
            logger.warning("Falling back to default schema due to LLM failures.")
            schema = self._load_default_schema()

        # Validate that schema is valid JSON schema and meets our ui_order requirements
        if not self._is_valid_schema(schema):
            logger.warning("Fetched schema is not valid or does not meet ui_order requirements. Falling back to default schema.")
            schema = await self._load_default_schema()

        self._schema_cache[key] = schema
        return schema

    def validate_data(self, schema, data):
        Draft7Validator.check_schema(schema)
        validator = Draft7Validator(schema)
        validator.validate(data)

    async def _fetch_schema_from_llm(self, content_type, context_str):
        system = self.config.get("default_system", "D&D 3.5e")
        setting = self.config.get("default_setting", "a generic fantasy setting")

        prompt = SCHEMA_PROMPT.format(
            system=system,
            setting=setting,
            content_type=content_type,
            context=context_str,
            schema=self.schema_prompt_template
        )
        for attempt in range(self.retry_count):
            try:
                temp = random.uniform(0.1, 0.7)
                response = await self.gpt_service.send_prompt_async(prompt, temp)
                if response:
                    schema = self.parser.parse_json(response)
                    if schema and self._is_valid_schema(schema):
                        return schema
                    else:
                        logger.error(f"Received schema is invalid or doesn't meet requirements. Attempt {attempt+1}/{self.retry_count}")
                else:
                    logger.error(f"No response from LLM for schema generation. Attempt {attempt+1}/{self.retry_count}")
            except Exception as e:
                logger.error(f"Error fetching schema from LLM: {e}. Attempt {attempt+1}/{self.retry_count}")
            await asyncio.sleep(self.retry_delay)
        return None

    def _is_valid_schema(self, schema):
        # Basic checks:
        # 1. It's a valid draft-07 schema
        # 2. "name" and "description" are required, have ui_order 1 and 2 respectively.
        # 3. additionalProperties = false
        # 4. Each property has ui_order and properties sorted by ui_order.
        try:
            Draft7Validator.check_schema(schema)
        except Exception as e:
            logger.error(f"Invalid schema format: {e}")
            return False

        if schema.get("additionalProperties", True) is not False:
            logger.error("Schema must have additionalProperties=false.")
            return False

        properties = schema.get("properties", {})
        required = schema.get("required", [])
        if "name" not in properties or "description" not in properties:
            logger.error("'name' and 'description' must be defined in the schema.")
            return False
        if "name" not in required or "description" not in required:
            logger.error("'name' and 'description' must be required properties.")
            return False

        # Check ui_order fields
        # Collect ui_orders to ensure uniqueness and correctness
        ui_orders = []
        for prop_name, prop_def in properties.items():
            if "ui_order" not in prop_def:
                logger.error(f"Property '{prop_name}' missing ui_order.")
                return False
            ui = prop_def["ui_order"]
            if not isinstance(ui, int):
                logger.error(f"Property '{prop_name}' ui_order must be an integer.")
                return False
            ui_orders.append((ui, prop_name))

        # Check that name and description are ui_order=1 and ui_order=2
        ui_dict = {p: d["ui_order"] for p, d in properties.items()}
        if ui_dict.get("name", None) != 1 or ui_dict.get("description", None) != 2:
            logger.error("name must have ui_order=1 and description ui_order=2.")
            return False

        # Check ui_orders are unique and sorted without gaps
        ui_orders_sorted = sorted(ui_orders, key=lambda x: x[0])
        for i, (u, p) in enumerate(ui_orders_sorted, start=1):
            if u != i:
                logger.error(f"ui_order must form a continuous sequence starting at 1. Found a gap at '{p}' with ui_order={u}.")
                return False

        return True

    def _load_default_schema(self):
        if not os.path.exists(self.default_schema_path):
            logger.error(f"Default schema file not found at {self.default_schema_path}. Using minimal fallback schema.")
            return {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                    "name": {"type": "string", "ui_order": 1},
                    "description": {"type": "string", "ui_order": 2}
                },
                "required": ["name", "description"],
                "additionalProperties": false
            }
        with open(self.default_schema_path, "r", encoding="utf-8") as f:
            schema = json.load(f)
        if not self._is_valid_schema(schema):
            logger.error("Default schema is invalid. Using minimal fallback schema.")
            return {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                    "name": {"type": "string", "ui_order": 1},
                    "description": {"type": "string", "ui_order": 2}
                },
                "required": ["name", "description"],
                "additionalProperties": False
            }
        return schema
</code>

./services/logger.py
<code>
import logging
import os

def setup_logger():
    logger = logging.getLogger("dnd_content_generator")
    logger.setLevel(logging.DEBUG)
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] %(message)s', "%Y-%m-%d %H:%M:%S")
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    return logger

logger = setup_logger()
</code>

./services/gpt_service.py
<code>
# gpt_service.py
import asyncio
import openai
import random
from src.services.logger import logger
from src.utils import load_config

async def post_to_gpt(messages, temp = 0.27):
    config = load_config("src/config/config.json")
    client = openai.AsyncOpenAI(api_key=config['gpt-api']['api-key'])

    model_name = config["app-settings"]["models"][0]
    conversation = [{"role": "user", "content": config.get("primer", "") + "\n\n" + messages}]
    logger.info(f"temp: {temp}")
    try:        
        # Use the modern async call for chat completions        
        response = await client.chat.completions.create(
            model=model_name,
            messages=conversation,
            max_tokens=config["app-settings"].get("max-tokens", 7000),
            temperature=temp,
            top_p=0.9,
            n=1
        )
        reply = response.choices[0].message.content
        logger.info(f"""Prompt: {conversation} \n\nResponse: {reply}""")
        return reply.strip()
    except Exception as e:
        logger.error(f"GPT request failed: {e}")
        return None

class GPTService:
    def __init__(self):
        pass

    async def send_prompt_async(self, prompt, temp=0.27):
        return await post_to_gpt(prompt, temp)
</code>

./services/file_manager.py
<code>
import json
import os
import datetime
import glob
from src.services.logger import logger
from src.utils import load_config

class FileManager:
    def __init__(self, config_path="src/config/config.json"):
        self.config = load_config(config_path)
        self.log_directories = self.config["log-directories"]
        self.schema_file = self.config["schema-validation"]["default_schema"]

        # Initialize with defaults from config
        self.categories_file = self.config["default_categories_file"]
        self.contexts_file = self.config["default_contexts_file"]

    def set_categories_file(self, filename):
        """Set the categories file to a selected filename. Assumes file exists in src/resources."""
        self.categories_file = os.path.join("src", "resources", filename)

    def set_contexts_file(self, filename):
        """Set the contexts file to a selected filename. Assumes file exists in src/resources."""
        self.contexts_file = os.path.join("src", "resources", filename)

    def load_categories(self):
        with open(self.categories_file, "r", encoding="utf-8") as f:
            return json.load(f)

    def load_contexts(self):
        with open(self.contexts_file, "r", encoding="utf-8") as f:
            return json.load(f)

    def load_default_schema(self):
        with open(self.schema_file, "r", encoding="utf-8") as f:
            return json.load(f)

    def write_to_log_file(self, category, content, detailed=False):
        directory = self.log_directories.get(category.lower(), "./logs/")
        os.makedirs(directory, exist_ok=True)
        timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
        extension = ".json" if detailed else ".csv"
        filename = f"{category.lower()}_{timestamp}{extension}"
        path = os.path.join(directory, filename)
        with open(path, "w", encoding="utf-8") as f:
            f.write(content)
        logger.info(f"Exported {category} to {path}")

    def get_available_categories_files(self):
        """Return a list of available category JSON files found in src/resources."""
        files = glob.glob("src/resources/*_categories.json")
        return [os.path.basename(f) for f in files]

    def get_available_contexts_files(self):
        """Return a list of available context JSON files found in src/resources."""
        files = glob.glob("src/resources/*_contexts.json")
        return [os.path.basename(f) for f in files]
</code>

./__init__.py
<code>
</code>

./controllers/data_controller.py
<code>
import asyncio
import json
import random
from jsonschema import ValidationError
from src.models.content_parser import ContentParser
from src.services.schema_service import SchemaService
from src.services.logger import logger
from src.services.prompt_templates import BASE_PROMPT, FULL_STATBLOCK_PROMPT

class DataController:
    def __init__(self, gpt_service, app_controller):
        self.gpt_service = gpt_service
        self.parser = ContentParser()
        self.schema_service = SchemaService()
        self.app_controller = app_controller  # Reference to get campaign prompt and breadcrumb

        config = self.schema_service.config
        self.retry_count = config["app-settings"].get("llm_retry_count", 3)
        self.retry_delay = config["app-settings"].get("llm_retry_delay", 2)

    def generate_content(self, content_type, context_str, n_results=3):
        return asyncio.run(self.generate_content_async(content_type, context_str, n_results))

    async def generate_content_async(self, content_type, context_str, n_results=3):
        schema = await self.schema_service.get_schema(content_type, context_str)
        if not schema:
            logger.error("No valid schema available. Cannot generate content.")
            return []

        breadcrumb = getattr(self.app_controller.state, 'breadcrumb', '')
        breadcrumb_str = f"Selected category/type hierarchy: {breadcrumb}" if breadcrumb else ""
        campaign_text = self.app_controller.state.campaign_prompt.strip()
        system = self.app_controller.state.system.strip()
        setting = self.app_controller.state.setting.strip()

        base_prompt = BASE_PROMPT.format(
            system=system if system else "D&D 3.5e",
            setting=setting if setting else "a generic fantasy setting",
            content_type=content_type,
            context=context_str,
            schema=json.dumps(schema)
        )

        if breadcrumb_str:
            base_prompt += "\n\n" + breadcrumb_str
        if campaign_text:
            base_prompt += "\n\n" + campaign_text

        tasks = [self._attempt_content_generation_async(base_prompt, schema) for _ in range(n_results)]
        results = await asyncio.gather(*tasks)
        return [r for r in results if r is not None]


    def get_full_statblock(self, content_type, context_str, base_content):
        return asyncio.run(self.get_full_statblock_async(content_type, context_str, base_content))

    async def get_full_statblock_async(self, content_type, context_str, base_content):
        schema = await self.schema_service.get_schema(content_type, context_str)
        if not schema:
            logger.error("No valid schema available for statblock generation.")
            return None

        breadcrumb = getattr(self.app_controller.state, 'breadcrumb', '')
        breadcrumb_str = f"Selected category/type hierarchy: {breadcrumb}" if breadcrumb else ""
        campaign_text = self.app_controller.state.campaign_prompt.strip()
        system = self.app_controller.state.system.strip()
        setting = self.app_controller.state.setting.strip()

        statblock_prompt = FULL_STATBLOCK_PROMPT.format(
            system=system if system else "D&D 3.5e",
            setting=setting if setting else "a generic fantasy setting",
            content_type=content_type,
            context=context_str,
            statblock_stats=base_content
        )

        # Incorporate breadcrumb if available
        if breadcrumb_str:
            statblock_prompt += "\n\n" + breadcrumb_str

        # Append campaign-specific prompt here as well
        campaign_text = self.app_controller.state.campaign_prompt.strip()
        if campaign_text:
            statblock_prompt += "\n\n" + campaign_text

        error_messages = []
        for attempt in range(self.retry_count):
            prompt = statblock_prompt
            if error_messages:
                prompt += "\n\n# Errors so far:\n" + "\n".join(error_messages)

            response = await self.gpt_service.send_prompt_async(prompt)
            if response:
                data = self.parser.parse_json(response)
                if data:
                    try:
                        self.schema_service.validate_data(schema, data)
                        normalized = self._normalize_data(data, schema)
                        return normalized
                    except ValidationError as ve:
                        logger.error(f"Statblock validation failed (attempt {attempt+1}): {ve.message}")
                        error_messages.append(f"Validation error: {ve.message}")
                else:
                    logger.error(f"Failed to parse JSON for statblock (attempt {attempt+1}).")
                    error_messages.append("Failed to parse JSON.")
            else:
                logger.error(f"No response from LLM for statblock (attempt {attempt+1}).")
                error_messages.append("No response from LLM.")

            await asyncio.sleep(self.retry_delay)

        logger.error("Failed to generate a valid statblock after all retries.")
        return None

    async def _attempt_content_generation_async(self, base_prompt, schema):
        error_messages = []
        for attempt in range(self.retry_count):
            prompt = base_prompt
            if error_messages:
                prompt += "\n\n# Errors so far:\n" + "\n".join(error_messages)

            temp = random.uniform(0.45, 0.85)

            response = await self.gpt_service.send_prompt_async(prompt, temp)
            if not response:
                logger.error(f"No response from LLM (attempt {attempt+1}/{self.retry_count}).")
                error_messages.append("No response from LLM.")
                await asyncio.sleep(self.retry_delay)
                continue

            data = self.parser.parse_json(response)
            if not data:
                logger.error(f"Failed to parse JSON (attempt {attempt+1}/{self.retry_count}).")
                error_messages.append("Failed to parse JSON.")
                await asyncio.sleep(self.retry_delay)
                continue

            try:
                self.schema_service.validate_data(schema, data)
                normalized = self._normalize_data(data, schema)
                return normalized
            except ValidationError as ve:
                logger.error(f"Validation failed (attempt {attempt+1}/{self.retry_count}): {ve.message}")
                error_messages.append(f"Validation error: {ve.message}")
                await asyncio.sleep(self.retry_delay)

        return None

    def _normalize_data(self, data, schema):
        properties = schema.get("properties", {})
        ordered_props = sorted(properties.items(), key=lambda x: x[1]["ui_order"])

        normalized_list = []
        for prop_name, prop_def in ordered_props:
            val = data.get(prop_name, "")
            val_str = self._to_plaintext_string(val)
            display_key = prop_name.replace("_", " ").title()
            normalized_list.append((display_key, val_str))

        normalized = {k: v for k, v in normalized_list}

        # Ensure Name and Description are first
        if "Name" in normalized and "Description" in normalized:
            name_val = normalized.pop("Name")
            desc_val = normalized.pop("Description")
            normalized = {"Name": name_val, "Description": desc_val, **normalized}

        return normalized

    def _to_plaintext_string(self, val):
        if isinstance(val, dict):
            parts = [f"{k.title()}: {self._to_plaintext_string(v)}" for k, v in val.items()]
            return "; ".join(parts)
        elif isinstance(val, list):
            return ", ".join([self._to_plaintext_string(item) for item in val])
        else:
            return str(val)
</code>

./controllers/__init__.py
<code>
</code>

./controllers/app_controller.py
<code>
import asyncio
from PySide6.QtCore import QThread, Signal, QObject
from src.services.file_manager import FileManager
from src.services.gpt_service import GPTService
from src.controllers.data_controller import DataController
from src.models.state import AppState

class GenerationWorker(QObject):
    finished = Signal(list)
    error = Signal(str)

    def __init__(self, data_controller, content_type, context_str, n_results):
        super().__init__()
        self.data_controller = data_controller
        self.content_type = content_type
        self.context_str = context_str
        self.n_results = n_results

    def run(self):
        try:
            results = asyncio.run(self.data_controller.generate_content_async(
                self.content_type,
                self.context_str,
                self.n_results
            ))
            if results:
                self.finished.emit(results)
            else:
                self.error.emit("No results generated.")
        except Exception as e:
            self.error.emit(str(e))

class AppController:
    def __init__(self):
        self.file_manager = FileManager()
        config = self.file_manager.config
        self.state = AppState()
        self.gpt_service = GPTService()
        self.data_controller = DataController(self.gpt_service, self)
        self.categories = self.file_manager.load_categories()
        self.contexts = self.file_manager.load_contexts()

    def set_system(self, system):
        self.state.system = system

    def set_setting(self, setting):
        self.state.setting = setting

    def set_detail_display_mode(self, mode):
        self.state.detail_display_mode = mode

    def set_category(self, category):
        self.state.selected_category = category

    def set_type(self, content_type):
        self.state.selected_type = content_type

    def set_num_results(self, n):
        self.state.num_results = n

    def set_level_range(self, min_level, max_level):
        self.state.min_level = min_level
        self.state.max_level = max_level

    def set_contexts(self, contexts):
        self.state.contexts = contexts

    def set_regen_options(self, name_only, lock_name):
        self.state.regenerate_name_only = name_only
        self.state.lock_name = lock_name

    def set_campaign_prompt(self, text):
        self.state.campaign_prompt = text

    def set_categories_file(self, filename):
        if filename:
            self.file_manager.categories_file = f"src/resources/{filename}"
        else:
            # fallback if needed
            pass

    def set_contexts_file(self, filename):
        if filename:
            self.file_manager.contexts_file = f"src/resources/{filename}"
        else:
            # fallback if needed
            pass

    def reload_categories(self):
        self.categories = self.file_manager.load_categories()

    def reload_contexts(self):
        self.contexts = self.file_manager.load_contexts()

    def generate_content_async(self, on_finished, on_error):
        if not self.state.selected_category or not self.state.selected_type:
            on_error("Please select a category and type before generating.")
            return

        # Construct context string with grouping
        # Example: If multiple contexts share the same parent, group them.
        # For simplicity, here we just join them. In advanced usage, 
        # you would find siblings and group them by their parent.
        context_list = self.state.contexts
        context_str = ", ".join(context_list)
        context_str += f" for characters between level {self.state.min_level} and {self.state.max_level}"

        self.worker_thread = QThread()
        self.worker = GenerationWorker(
            self.data_controller,
            self.state.selected_type,
            context_str,
            self.state.num_results
        )
        self.worker.moveToThread(self.worker_thread)
        self.worker.finished.connect(on_finished)
        self.worker.error.connect(on_error)
        self.worker.finished.connect(self.worker_thread.quit)
        self.worker.error.connect(self.worker_thread.quit)
        self.worker_thread.started.connect(self.worker.run)
        self.worker_thread.start()

    def get_full_statblock(self, base_content):
        context_str = ", ".join(self.state.contexts)
        context_str += f" for characters between level {self.state.min_level} and {self.state.max_level}"
        return self.data_controller.get_full_statblock(self.state.selected_type, context_str, base_content)

    def export_to_logs(self, detailed=False):
        category = self.state.selected_type or "results"
        if detailed:
            for content in self.state.last_results:
                json_str = self._to_json_str(content)
                self.file_manager.write_to_log_file(category, json_str, detailed=True)
        else:
            if self.state.last_results:
                keys = list(self.state.last_results[0].keys())
                lines = [",".join(keys)]
                for r in self.state.last_results:
                    row = [str(r.get(k, "")) for k in keys]
                    lines.append(",".join(row))
                csv_data = "\n".join(lines)
                self.file_manager.write_to_log_file(category, csv_data)

    def _to_json_str(self, data):
        import json
        return json.dumps(data, ensure_ascii=False, indent=2)
</code>

./main.py
<code>
import sys
from PySide6.QtWidgets import QApplication
from src.controllers.app_controller import AppController
from src.ui.main_window import MainWindow

def main():
    app_controller = AppController()
    app = QApplication(sys.argv)
    window = MainWindow(app_controller)
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
</code>

./ui/__init__.py
<code>
</code>

./ui/results_view.py
<code>
from PySide6.QtWidgets import QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem
from PySide6.QtWidgets import QHeaderView
from PySide6.QtCore import Qt, Signal

from src.services.logger import logger

class ResultsView(QWidget):
    """
    ResultsView displays generated results in a table only.
    The 'Export Table' and 'More Info' buttons were moved to the OptionsPanel.
    """

    request_more_info = Signal(dict)

    def __init__(self, parent=None):
        super().__init__(parent)
        layout = QVBoxLayout()

        self.table = QTableWidget()
        self.table.setColumnCount(0)
        self.table.setRowCount(0)
        self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.setSelectionMode(QTableWidget.SingleSelection)
        self.table.setEditTriggers(QTableWidget.NoEditTriggers)

        layout.addWidget(self.table)
        self.setLayout(layout)

        self.results = []
        self.last_headers = []

    def display_results(self, results):
        self.results = results
        self.table.clear()
        if not results:
            if self.last_headers:
                self.table.setColumnCount(len(self.last_headers))
                self.table.setHorizontalHeaderLabels(self.last_headers)
            else:
                self.table.setColumnCount(0)
            self.table.setRowCount(0)
            return

        # Extract keys from the first result
        keys = list(results[0].keys())

        # Ensure "Name" and "Description" are the first two columns
        # Remove them from keys if they exist to avoid duplication
        if "Name" in keys:
            keys.remove("Name")
        if "Description" in keys:
            keys.remove("Description")
            
        # Re-insert them at the front
        keys = ["Name", "Description"] + keys

        logger.info(f"Reordered Table Column Keys: {keys}")
        self.last_headers = keys
        self.table.setColumnCount(len(keys))
        self.table.setHorizontalHeaderLabels(keys)
        self.table.setRowCount(len(results))

        for r, res in enumerate(results):
            # Always set Name and Description at columns 0 and 1
            name_val = str(res.get("Name", ""))
            description_val = str(res.get("Description", ""))
            name_item = QTableWidgetItem(name_val)
            description_item = QTableWidgetItem(description_val)

            self.table.setItem(r, 0, name_item)
            self.table.setItem(r, 1, description_item)

            # Set remaining columns
            # Start from column 2 for other keys
            col_index = 2
            for k in keys[2:]:  # keys after Name and Description
                val = str(res.get(k, ""))
                item = QTableWidgetItem(val)
                self.table.setItem(r, col_index, item)
                col_index += 1

        # Adjust column widths:
        for i in range(0, len(keys)):
            self.table.horizontalHeader().setSectionResizeMode(i, QHeaderView.ResizeToContents)
</code>

./ui/dialogs.py
<code>
from PySide6.QtWidgets import QMessageBox

def show_error(parent, message):
    msg = QMessageBox(parent)
    msg.setIcon(QMessageBox.Critical)
    msg.setText(message)
    msg.setWindowTitle("Error")
    msg.exec()

def show_info(parent, message):
    msg = QMessageBox(parent)
    msg.setIcon(QMessageBox.Information)
    msg.setText(message)
    msg.setWindowTitle("Info")
    msg.exec()
</code>

./ui/options_panel.py
<code>
from PySide6.QtWidgets import (
    QWidget, QLabel, QSpinBox, QCheckBox, QSlider, QGroupBox, QVBoxLayout, 
    QHBoxLayout, QGridLayout, QFormLayout, QComboBox, QPushButton, QSpacerItem, QSizePolicy
)
from PySide6.QtCore import Qt, Signal

class OptionsPanel(QWidget):
    """
    Updated OptionsPanel:
    - Number of Results
    - Detail Display Mode
    - Min/Max Level sliders with enforced constraints
    - 2x2 button grid: Generate, Export Detailed, Export Table, More Info
    """

    generateRequested = Signal()
    exportDetailsRequested = Signal()
    exportResultsRequested = Signal()
    moreInfoRequested = Signal()
    optionsChanged = Signal(dict)

    def __init__(self, on_options_changed, parent=None):
        super().__init__(parent)
        self.on_options_changed = on_options_changed

        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(10,10,10,10)
        main_layout.setSpacing(10)

        group_box = QGroupBox("Generation Options")
        group_box_layout = QVBoxLayout()
        group_box_layout.setContentsMargins(10,10,10,10)
        group_box_layout.setSpacing(10)

        # Form layout for main options
        form_layout = QFormLayout()
        form_layout.setHorizontalSpacing(20)
        form_layout.setVerticalSpacing(10)

        # Number of Results
        self.num_results = QSpinBox()
        self.num_results.setRange(1, 100)
        self.num_results.setValue(3)
        self.num_results.valueChanged.connect(self.options_changed)

        # Detail Display Mode
        self.detail_display_mode = QComboBox()
        self.detail_display_mode.addItems(["Plain Text", "Markdown", "Formatted (3.5e Style)", "JSON Raw"])
        self.detail_display_mode.currentIndexChanged.connect(self.options_changed)

        # Min/Max Level controls with constraints
        self.min_label = QLabel("Min Level: 1")
        self.min_label.setFixedWidth(80)
        self.min_label.setAlignment(Qt.AlignRight | Qt.AlignVCenter)
        self.min_level = QSlider(Qt.Horizontal)
        self.min_level.setRange(1,20)
        self.min_level.setValue(1)
        self.min_level.valueChanged.connect(self.update_min_level)

        min_level_layout = QHBoxLayout()
        min_level_layout.addWidget(self.min_label)
        min_level_layout.addWidget(self.min_level)

        self.max_label = QLabel("Max Level: 3")
        self.max_label.setFixedWidth(80)
        self.max_label.setAlignment(Qt.AlignRight | Qt.AlignVCenter)
        self.max_level = QSlider(Qt.Horizontal)
        self.max_level.setRange(1,20)
        self.max_level.setValue(3)
        self.max_level.valueChanged.connect(self.update_max_level)

        max_level_layout = QHBoxLayout()
        max_level_layout.addWidget(self.max_label)
        max_level_layout.addWidget(self.max_level)

        level_layout = QVBoxLayout()
        level_layout.addLayout(min_level_layout)
        level_layout.addLayout(max_level_layout)

        level_widget = QWidget()
        level_widget.setLayout(level_layout)

        # Add form fields (no regeneration options now)
        form_layout.addRow("Number of Results:", self.num_results)
        form_layout.addRow("Detail Display Mode:", self.detail_display_mode)
        form_layout.addRow("Level Range:", level_widget)

        group_box_layout.addLayout(form_layout)

        # Button grid (2x2)
        button_grid = QGridLayout()
        button_grid.setContentsMargins(0,0,0,0)
        button_grid.setSpacing(10)
        
        self.generate_btn = QPushButton("Generate")
        self.more_info_btn = QPushButton("More Info")
        self.export_details_btn = QPushButton("Export Preview")
        self.export_table_btn = QPushButton("Export Table")

        # Connect signals
        self.generate_btn.clicked.connect(self.generateRequested.emit)
        self.export_details_btn.clicked.connect(self.exportDetailsRequested.emit)
        self.export_table_btn.clicked.connect(self.exportResultsRequested.emit)
        self.more_info_btn.clicked.connect(self.moreInfoRequested.emit)

        # Place them in the 2x2 grid
        button_grid.addWidget(self.generate_btn, 0, 0)
        button_grid.addWidget(self.export_details_btn, 0, 1)
        button_grid.addWidget(self.export_table_btn, 1, 0)
        button_grid.addWidget(self.more_info_btn, 1, 1)

        group_box_layout.addSpacing(10)
        group_box_layout.addLayout(button_grid)

        group_box.setLayout(group_box_layout)
        main_layout.addWidget(group_box)
        self.setLayout(main_layout)

    def set_tooltips(self, tooltips):
        if not isinstance(tooltips, dict):
            return
        if "num_results" in tooltips:
            self.num_results.setToolTip(tooltips["num_results"])
        if "min_level" in tooltips:
            self.min_level.setToolTip(tooltips["min_level"])
            self.min_label.setToolTip(tooltips["min_level"])
        if "max_level" in tooltips:
            self.max_level.setToolTip(tooltips["max_level"])
            self.max_label.setToolTip(tooltips["max_level"])

    def update_min_level(self, value):
        # Ensure min_level is not greater than max_level
        if value > self.max_level.value():
            self.max_level.setValue(value)
        self.min_label.setText(f"Min Level: {self.min_level.value()}")
        self.options_changed()

    def update_max_level(self, value):
        # Ensure max_level is not less than min_level
        if value < self.min_level.value():
            self.min_level.setValue(value)
        self.max_label.setText(f"Max Level: {self.max_level.value()}")
        self.options_changed()

    def options_changed(self, *args):
        opts = {
            "num_results": self.num_results.value(),
            "min_level": self.min_level.value(),
            "max_level": self.max_level.value(),
            "detail_display_mode": self.detail_display_mode.currentText()
        }
        self.on_options_changed(opts)
</code>

./ui/context_selector.py
<code>
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QCheckBox, QScrollArea, 
                               QWidget, QFormLayout, QLabel, QPushButton, QHBoxLayout, QFrame)
from PySide6.QtCore import Qt

class ContextSelector(QWidget):
    """
    ContextSelector displays a list of categories and their respective contexts.
    Each category is shown with a label (bold) followed by its options.
    Provides 'Select All' and 'Deselect All' convenience buttons.
    Emits on_contexts_changed when the set of selected contexts changes.
    """

    def __init__(self, contexts, on_contexts_changed, parent=None):
        super().__init__(parent)
        self.contexts = contexts
        self.on_contexts_changed = on_contexts_changed
        self.selected_contexts = []

        main_layout = QVBoxLayout()

        # Select / Deselect All buttons
        btn_layout = QHBoxLayout()
        select_all_btn = QPushButton("Select All")
        select_all_btn.clicked.connect(self.select_all)
        deselect_all_btn = QPushButton("Deselect All")
        deselect_all_btn.clicked.connect(self.deselect_all)

        btn_layout.addWidget(select_all_btn)
        btn_layout.addWidget(deselect_all_btn)
        main_layout.addLayout(btn_layout)

        scroll = QScrollArea()
        scroll.setWidgetResizable(True)

        container = QWidget()
        form_layout = QFormLayout()

        self.checkboxes = []
        # Display categories in bold to separate them visually
        for cat, opts in self.contexts.items():
            # Category label as a section header
            cat_label = QLabel(f"<b>{cat}</b>")
            form_layout.addRow(cat_label)
            # Add some spacing or a line separator
            line = QFrame()
            line.setFrameShape(QFrame.HLine)
            line.setFrameShadow(QFrame.Sunken)
            form_layout.addRow(line)

            for opt in opts:
                cb = QCheckBox(opt)
                cb.stateChanged.connect(self.update_contexts)
                form_layout.addRow("", cb)
                self.checkboxes.append(cb)

        container.setLayout(form_layout)
        scroll.setWidget(container)
        main_layout.addWidget(scroll)
        self.setLayout(main_layout)

    def update_contexts(self):
        self.selected_contexts = [cb.text() for cb in self.checkboxes if cb.isChecked()]
        self.on_contexts_changed(self.selected_contexts)

    def select_all(self):
        for cb in self.checkboxes:
            cb.setChecked(True)
        self.update_contexts()

    def deselect_all(self):
        for cb in self.checkboxes:
            cb.setChecked(False)
        self.update_contexts()
</code>

./ui/main_window.py
<code>
import os
import glob
import json

from PySide6.QtWidgets import (
    QMainWindow, QWidget, QHBoxLayout, QVBoxLayout, QLineEdit, QLabel, QTreeWidget,
    QTreeWidgetItem, QPushButton, QSplitter, QTextEdit, QFrame, QProgressDialog,
    QComboBox, QDialog, QScrollArea
)
from PySide6.QtCore import Qt
from PySide6.QtGui import QColor, QBrush

from src.ui.dialogs import show_error, show_info
from src.utils import load_config
from src.services.logger import logger
from src.ui.results_view import ResultsView
from src.ui.options_panel import OptionsPanel


class MainWindow(QMainWindow):
    def __init__(self, app_controller, parent=None):
        super().__init__(parent)
        self.app_controller = app_controller
        self.config = load_config("src/config/config.json")
        self.ui_config = self.config.get("ui", {})
        self.setWindowTitle("D&D Content Generator")

        main_splitter = QSplitter(Qt.Horizontal, self)

        # --- Left panel: Categories and Contexts ---
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.setContentsMargins(5, 5, 5, 5)
        left_layout.setSpacing(5)

        categories_files = sorted(glob.glob("src/resources/*_categories.json"))
        contexts_files = sorted(glob.glob("src/resources/*_contexts.json"))

        # File selectors for categories and contexts
        file_selection_layout = QHBoxLayout()
        file_selection_layout.setContentsMargins(0,0,0,0)
        file_selection_layout.setSpacing(5)

        self.category_file_combo = QComboBox()
        self.category_file_combo.addItem("Select a categories file...")
        for cat_file in categories_files:
            self.category_file_combo.addItem(os.path.basename(cat_file))
        self.category_file_combo.currentTextChanged.connect(self.on_category_file_changed)

        self.context_file_combo = QComboBox()
        self.context_file_combo.addItem("Select a contexts file...")
        for ctx_file in contexts_files:
            self.context_file_combo.addItem(os.path.basename(ctx_file))
        self.context_file_combo.currentTextChanged.connect(self.on_context_file_changed)

        file_selection_layout.addWidget(QLabel("Cat. File:"))
        file_selection_layout.addWidget(self.category_file_combo)
        file_selection_layout.addWidget(QLabel("Ctx. File:"))
        file_selection_layout.addWidget(self.context_file_combo)
        left_layout.addLayout(file_selection_layout)

        # Category Breadcrumb Section
        cat_breadcrumb_container = QWidget()
        cat_breadcrumb_container_layout = QVBoxLayout(cat_breadcrumb_container)
        cat_breadcrumb_container_layout.setContentsMargins(0,0,0,0)
        cat_breadcrumb_container_layout.setSpacing(0)

        cat_breadcrumb_label = QLabel("<b><small>Breadcrumbs:</small></b>")
        cat_breadcrumb_label.setContentsMargins(0,0,0,0)
        cat_breadcrumb_container_layout.addWidget(cat_breadcrumb_label)

        self.category_breadcrumb_scroll = QScrollArea()
        self.category_breadcrumb_scroll.setWidgetResizable(True)
        self.category_breadcrumb_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.category_breadcrumb_scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.category_breadcrumb_scroll.setContentsMargins(0,0,0,0)
        self.category_breadcrumb_scroll.setFixedHeight(30)

        self.category_breadcrumb_content_label = QLabel("")
        self.category_breadcrumb_content_label.setWordWrap(True)
        self.category_breadcrumb_content_label.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.category_breadcrumb_content_label.setContentsMargins(0,0,0,0)

        scroll_content_cat = QWidget()
        scroll_content_cat_layout = QVBoxLayout(scroll_content_cat)
        scroll_content_cat_layout.setContentsMargins(0,0,0,0)
        scroll_content_cat_layout.setSpacing(0)
        scroll_content_cat_layout.addWidget(self.category_breadcrumb_content_label)
        scroll_content_cat.setLayout(scroll_content_cat_layout)

        self.category_breadcrumb_scroll.setWidget(scroll_content_cat)
        cat_breadcrumb_container_layout.addWidget(self.category_breadcrumb_scroll)
        left_layout.addWidget(cat_breadcrumb_container)

        # Category Filter + Tree
        self.category_filter = QLineEdit()
        self.category_filter.setPlaceholderText("Filter categories...")
        self.category_filter.textChanged.connect(self.filter_categories)
        left_layout.addWidget(self.category_filter)

        # Controls for Category Tree
        cat_controls_layout = QHBoxLayout()
        cat_controls_layout.setContentsMargins(0,0,0,0)
        cat_controls_layout.setSpacing(5)

        self.cat_expand_all_btn = QPushButton("Expand All")
        self.cat_expand_all_btn.clicked.connect(lambda: self.set_all_expanded(self.category_tree, True))
        self.cat_collapse_all_btn = QPushButton("Collapse All")
        self.cat_collapse_all_btn.clicked.connect(lambda: self.set_all_expanded(self.category_tree, False))
        self.cat_deselect_all_btn = QPushButton("Deselect All")
        self.cat_deselect_all_btn.clicked.connect(lambda: self.set_all_checked(self.category_tree, Qt.Unchecked))
        self.cat_select_siblings_btn = QPushButton("Select Siblings")
        self.cat_select_siblings_btn.clicked.connect(lambda: self.select_siblings(self.category_tree))
        cat_controls_layout.addWidget(self.cat_expand_all_btn)
        cat_controls_layout.addWidget(self.cat_collapse_all_btn)
        cat_controls_layout.addWidget(self.cat_deselect_all_btn)
        cat_controls_layout.addWidget(self.cat_select_siblings_btn)
        left_layout.addLayout(cat_controls_layout)

        self.category_tree = QTreeWidget()
        self.category_tree.setHeaderLabel("Categories & Types")
        self.category_tree.setSelectionMode(QTreeWidget.SingleSelection)
        self.category_tree.itemChanged.connect(self.on_item_changed)
        left_layout.addWidget(self.category_tree, 1)  # Stretch factor to give tree more space

        # Context Breadcrumb Section
        ctx_breadcrumb_container = QWidget()
        ctx_breadcrumb_container_layout = QVBoxLayout(ctx_breadcrumb_container)
        ctx_breadcrumb_container_layout.setContentsMargins(0,0,0,0)
        ctx_breadcrumb_container_layout.setSpacing(0)

        ctx_breadcrumb_label = QLabel("<b><small>Breadcrumbs:</small></b>")
        ctx_breadcrumb_label.setContentsMargins(0,0,0,0)
        ctx_breadcrumb_container_layout.addWidget(ctx_breadcrumb_label)

        self.context_breadcrumb_scroll = QScrollArea()
        self.context_breadcrumb_scroll.setWidgetResizable(True)
        self.context_breadcrumb_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.context_breadcrumb_scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.context_breadcrumb_scroll.setContentsMargins(0,0,0,0)
        self.context_breadcrumb_scroll.setFixedHeight(30)

        self.context_breadcrumb_content_label = QLabel("")
        self.context_breadcrumb_content_label.setWordWrap(True)
        self.context_breadcrumb_content_label.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.context_breadcrumb_content_label.setContentsMargins(0,0,0,0)

        scroll_content_ctx = QWidget()
        scroll_content_ctx_layout = QVBoxLayout(scroll_content_ctx)
        scroll_content_ctx_layout.setContentsMargins(0,0,0,0)
        scroll_content_ctx_layout.setSpacing(0)
        scroll_content_ctx_layout.addWidget(self.context_breadcrumb_content_label)
        scroll_content_ctx.setLayout(scroll_content_ctx_layout)

        self.context_breadcrumb_scroll.setWidget(scroll_content_ctx)
        ctx_breadcrumb_container_layout.addWidget(self.context_breadcrumb_scroll)
        left_layout.addWidget(ctx_breadcrumb_container)

        # Context Filter + Tree
        self.context_filter = QLineEdit()
        self.context_filter.setPlaceholderText("Filter contexts...")
        self.context_filter.textChanged.connect(self.filter_contexts)
        left_layout.addWidget(self.context_filter)

        ctx_controls_layout = QHBoxLayout()
        ctx_controls_layout.setContentsMargins(0,0,0,0)
        ctx_controls_layout.setSpacing(5)

        self.ctx_expand_all_btn = QPushButton("Expand All")
        self.ctx_expand_all_btn.clicked.connect(lambda: self.set_all_expanded(self.context_tree, True))
        self.ctx_collapse_all_btn = QPushButton("Collapse All")
        self.ctx_collapse_all_btn.clicked.connect(lambda: self.set_all_expanded(self.context_tree, False))
        self.ctx_deselect_all_btn = QPushButton("Deselect All")
        self.ctx_deselect_all_btn.clicked.connect(lambda: self.set_all_checked(self.context_tree, Qt.Unchecked))
        self.ctx_select_siblings_btn = QPushButton("Select Siblings")
        self.ctx_select_siblings_btn.clicked.connect(lambda: self.select_siblings(self.context_tree))
        ctx_controls_layout.addWidget(self.ctx_expand_all_btn)
        ctx_controls_layout.addWidget(self.ctx_collapse_all_btn)
        ctx_controls_layout.addWidget(self.ctx_deselect_all_btn)
        ctx_controls_layout.addWidget(self.ctx_select_siblings_btn)
        left_layout.addLayout(ctx_controls_layout)

        self.context_tree = QTreeWidget()
        self.context_tree.setHeaderLabel("Contexts")
        self.context_tree.setSelectionMode(QTreeWidget.MultiSelection)
        self.context_tree.itemChanged.connect(self.on_item_changed)
        left_layout.addWidget(self.context_tree, 2)  # More space for contexts as well

        # --- Right side: Options, Campaign Notes, Preview, Results ---
        right_vertical_splitter = QSplitter(Qt.Vertical)
        top_horizontal_splitter = QSplitter(Qt.Horizontal)

        options_container = QWidget()
        options_layout = QVBoxLayout(options_container)
        options_layout.setContentsMargins(5,5,5,5)
        options_layout.setSpacing(5)

        self.options_panel = OptionsPanel(on_options_changed=self.on_options_changed)
        self.options_panel.generateRequested.connect(self.generate_content)
        self.options_panel.exportDetailsRequested.connect(self.export_detailed)
        self.options_panel.exportResultsRequested.connect(self.export_results_triggered)
        self.options_panel.moreInfoRequested.connect(self.more_info_triggered)

        options_layout.addWidget(self.options_panel)
        options_layout.addStretch()

        notes_and_preview_container = QWidget()
        notes_layout = QVBoxLayout(notes_and_preview_container)
        notes_layout.setContentsMargins(5,5,5,5)
        notes_layout.setSpacing(5)

        system_setting_layout = QHBoxLayout()
        system_setting_layout.setContentsMargins(0,0,0,0)
        system_setting_layout.setSpacing(5)

        self.system_edit = QLineEdit()
        self.system_edit.setPlaceholderText("Enter RPG system (e.g. D&D 3.5e)")
        self.system_edit.textChanged.connect(self.on_system_text_changed)

        self.setting_edit = QLineEdit()
        self.setting_edit.setPlaceholderText("Enter setting or theme (e.g. Forgotten Realms)")
        self.setting_edit.textChanged.connect(self.on_setting_text_changed)

        system_setting_layout.addWidget(QLabel("System:"))
        system_setting_layout.addWidget(self.system_edit)
        system_setting_layout.addWidget(QLabel("Setting:"))
        system_setting_layout.addWidget(self.setting_edit)

        notes_layout.addLayout(system_setting_layout)

        self.campaign_prompt_edit = QTextEdit()
        self.campaign_prompt_edit.setPlaceholderText("Add campaign-specific instructions here...")
        self.campaign_prompt_edit.textChanged.connect(self.on_campaign_text_changed)
        notes_layout.addWidget(QLabel("Campaign Notes:"))
        notes_layout.addWidget(self.campaign_prompt_edit, 1)

        self.preview_box = QTextEdit()
        self.preview_box.setReadOnly(True)
        preview_frame = QFrame()
        preview_frame.setFrameShape(QFrame.StyledPanel)
        preview_layout = QVBoxLayout(preview_frame)
        preview_layout.setContentsMargins(5,5,5,5)
        preview_layout.setSpacing(5)
        preview_layout.addWidget(QLabel("Preview:"))
        preview_layout.addWidget(self.preview_box)
        notes_layout.addWidget(preview_frame, 2)

        top_horizontal_splitter.addWidget(options_container)
        top_horizontal_splitter.addWidget(notes_and_preview_container)
        top_horizontal_splitter.setStretchFactor(0, 1)
        top_horizontal_splitter.setStretchFactor(1, 3)

        results_container = QWidget()
        results_layout = QVBoxLayout(results_container)
        results_layout.setContentsMargins(5,5,5,5)
        results_layout.setSpacing(5)

        self.results_view = ResultsView()
        self.results_view.table.itemSelectionChanged.connect(self.update_preview)
        self.results_view.setMinimumHeight(300)
        results_layout.addWidget(self.results_view)

        right_vertical_splitter.addWidget(top_horizontal_splitter)
        right_vertical_splitter.addWidget(results_container)
        right_vertical_splitter.setStretchFactor(0, 1)
        right_vertical_splitter.setStretchFactor(1, 2)

        main_splitter.addWidget(left_widget)
        main_splitter.addWidget(right_vertical_splitter)
        self.resize(1920, 1080)
        main_splitter.setSizes([int(self.width() * 0.15), int(self.width() * 0.85)])
        self.setCentralWidget(main_splitter)

        self._show_category_placeholder()
        self._show_context_placeholder()

    def _show_category_placeholder(self):
        self.category_tree.clear()
        placeholder_item = QTreeWidgetItem(["Select a Category..."])
        placeholder_item.setFlags(placeholder_item.flags() & ~Qt.ItemIsUserCheckable)
        self.category_tree.addTopLevelItem(placeholder_item)

    def _show_context_placeholder(self):
        self.context_tree.clear()
        placeholder_item = QTreeWidgetItem(["Select a Context..."])
        placeholder_item.setFlags(placeholder_item.flags() & ~Qt.ItemIsUserCheckable)
        self.context_tree.addTopLevelItem(placeholder_item)

    def on_category_file_changed(self, filename):
        if filename.startswith("Select"):
            self.app_controller.set_categories_file("")
            self.app_controller.reload_categories()
            self._show_category_placeholder()
        else:
            self.app_controller.set_categories_file(filename)
            self.app_controller.reload_categories()
            self._populate_category_tree()
        self.on_category_type_selected()  # Refresh breadcrumb

    def on_context_file_changed(self, filename):
        if filename.startswith("Select"):
            self.app_controller.set_contexts_file("")
            self.app_controller.reload_contexts()
            self._show_context_placeholder()
        else:
            self.app_controller.set_contexts_file(filename)
            self.app_controller.reload_contexts()
            self._populate_context_tree()
        self.on_context_selected()  # Refresh breadcrumb

    def _populate_category_tree(self):
        self.category_tree.clear()
        categories = self.app_controller.categories
        if not categories:
            placeholder_item = QTreeWidgetItem(["Select a Category..."])
            placeholder_item.setFlags(placeholder_item.flags() & ~Qt.ItemIsUserCheckable)
            self.category_tree.addTopLevelItem(placeholder_item)
            return

        for top_key, top_value in categories.items():
            top_item = QTreeWidgetItem([top_key])
            self.category_tree.addTopLevelItem(top_item)
            self._add_items(top_item, top_value)
        self.apply_color_coding(self.category_tree)
        self._finalize_tree_checkstates(self.category_tree)

    def _populate_context_tree(self):
        self.context_tree.clear()
        contexts = self.app_controller.contexts
        if not contexts:
            placeholder_item = QTreeWidgetItem(["Select a Context..."])
            placeholder_item.setFlags(placeholder_item.flags() & ~Qt.ItemIsUserCheckable)
            self.context_tree.addTopLevelItem(placeholder_item)
            return

        for top_key, top_value in contexts.items():
            top_item = QTreeWidgetItem([top_key])
            self.context_tree.addTopLevelItem(top_item)
            self._add_context_items(top_item, top_value)
        self.apply_color_coding(self.context_tree)
        self._finalize_tree_checkstates(self.context_tree)

    def _add_items(self, parent_item, data):
        if isinstance(data, dict):
            for key, value in data.items():
                node = QTreeWidgetItem([key])
                parent_item.addChild(node)
                self._add_items(node, value)
        elif isinstance(data, list):
            for val in data:
                leaf = QTreeWidgetItem([val])
                parent_item.addChild(leaf)

    def _add_context_items(self, parent_item, data):
        if isinstance(data, dict):
            for key, value in data.items():
                node = QTreeWidgetItem([key])
                parent_item.addChild(node)
                self._add_context_items(node, value)
        elif isinstance(data, list):
            for val in data:
                leaf = QTreeWidgetItem([val])
                parent_item.addChild(leaf)

    def _finalize_tree_checkstates(self, tree):
        def finalize_item(item):
            if item.childCount() > 0:
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable | Qt.ItemIsTristate)
                item.setCheckState(0, Qt.Unchecked)
                for i in range(item.childCount()):
                    finalize_item(item.child(i))
            else:
                flags = item.flags() | Qt.ItemIsUserCheckable
                item.setFlags(flags & ~Qt.ItemIsTristate)
                item.setCheckState(0, Qt.Unchecked)

        for i in range(tree.topLevelItemCount()):
            top_item = tree.topLevelItem(i)
            finalize_item(top_item)

    def on_item_changed(self, item, column):
        if column != 0:
            return
        self.propagate_check_state_to_children(item, item.checkState(0))
        # After changing checks, update categories and contexts accordingly
        self.on_category_type_selected()
        self.on_context_selected()

    def propagate_check_state_to_children(self, item, state):
        for i in range(item.childCount()):
            child = item.child(i)
            child.setCheckState(0, state)
            self.propagate_check_state_to_children(child, state)

    def get_checked_leaves(self, tree):
        """Return a list of all checked leaf node texts from the given QTreeWidget."""
        checked_items = []
        def recurse(node):
            if node.childCount() == 0 and node.checkState(0) == Qt.Checked:
                checked_items.append(node.text(0))
            for i in range(node.childCount()):
                recurse(node.child(i))
        for i in range(tree.topLevelItemCount()):
            top = tree.topLevelItem(i)
            recurse(top)
        return checked_items

    def on_category_type_selected(self):
        # Gather all checked leaves from category tree
        checked_categories = self.get_checked_leaves(self.category_tree)
        if checked_categories:
            lines = self._group_siblings(self.category_tree, checked_categories)
            breadcrumb_text = " | ".join(lines)
            self.update_category_breadcrumb(breadcrumb_text)
        else:
            self.app_controller.set_category(None)
            self.app_controller.set_type(None)
            self.update_category_breadcrumb("")

    def on_context_selected(self):
        # Gather all checked leaves from context tree
        checked_contexts = self.get_checked_leaves(self.context_tree)
        if checked_contexts:
            lines = self._group_siblings(self.context_tree, checked_contexts)
            breadcrumb_text = " | ".join(lines)
            self.update_context_breadcrumb(breadcrumb_text)
        else:
            self.app_controller.set_contexts([])
            self.update_context_breadcrumb("")

    def _group_siblings(self, tree, checked_leaves):
        """
        Given a tree and a list of checked leaves, group siblings by their parent.
        Returns a list of strings like "Parent: child1, child2" or single-level items.
        Also updates the app_controller accordingly.
        """
        def find_parents(item):
            parts = []
            current = item
            while current is not None:
                parts.insert(0, current.text(0))
                current = current.parent()
            return parts

        def find_item_by_text(root_item, text):
            if root_item.text(0) == text and root_item.childCount() == 0:
                return root_item
            for idx in range(root_item.childCount()):
                found = find_item_by_text(root_item.child(idx), text)
                if found:
                    return found
            return None

        parent_map = {}
        root = tree.invisibleRootItem()

        for leaf_text in checked_leaves:
            found_item = None
            for i in range(root.childCount()):
                top_item = root.child(i)
                found_item = find_item_by_text(top_item, leaf_text)
                if found_item:
                    break
            if found_item:
                path = find_parents(found_item)
                if len(path) > 1:
                    parent = path[-2]
                    child = path[-1]
                    parent_map.setdefault(parent, []).append(child)
                else:
                    parent_map.setdefault(path[-1], [])

        lines = []
        categories_used = set()
        types_used = set()
        # For contexts, we just gather them all together
        contexts_used = []

        for parent, children in parent_map.items():
            if children:
                lines.append(f"{parent}: {', '.join(children)}")
                categories_used.add(parent)
                types_used.update(children)
                contexts_used.extend(children)
            else:
                lines.append(parent)
                categories_used.add(parent)
                contexts_used.append(parent)

        if tree == self.category_tree:
            self.app_controller.set_category(", ".join(categories_used) if categories_used else None)
            self.app_controller.set_type(", ".join(types_used) if types_used else None)
        else:
            self.app_controller.set_contexts(contexts_used)

        return lines

    def filter_categories(self):
        filter_text = self.category_filter.text().strip().lower()
        if not filter_text:
            self._set_tree_items_visible(self.category_tree, True)
        else:
            self._filter_tree(self.category_tree, filter_text)

    def filter_contexts(self):
        filter_text = self.context_filter.text().strip().lower()
        if not filter_text:
            self._set_tree_items_visible(self.context_tree, True)
        else:
            self._filter_tree(self.context_tree, filter_text)

    def _filter_tree(self, tree, text):
        for i in range(tree.topLevelItemCount()):
            top_item = tree.topLevelItem(i)
            self._filter_item(top_item, text)

    def _filter_item(self, item, text):
        match = text in item.text(0).lower()
        child_match = False
        for i in range(item.childCount()):
            child = item.child(i)
            if self._filter_item(child, text):
                child_match = True
        item.setHidden(not (match or child_match))
        return match or child_match

    def _set_tree_items_visible(self, tree, visible):
        for i in range(tree.topLevelItemCount()):
            top_item = tree.topLevelItem(i)
            self._set_item_visible(top_item, visible)

    def _set_item_visible(self, item, visible):
        item.setHidden(not visible)
        for i in range(item.childCount()):
            self._set_item_visible(item.child(i), visible)

    def set_all_expanded(self, tree, expand):
        def recurse_expand(item):
            item.setExpanded(expand)
            for i in range(item.childCount()):
                child = item.child(i)
                recurse_expand(child)

        for i in range(tree.topLevelItemCount()):
            top = tree.topLevelItem(i)
            recurse_expand(top)

    def set_all_checked(self, tree, state):
        for i in range(tree.topLevelItemCount()):
            top = tree.topLevelItem(i)
            top.setCheckState(0, state)
            self.propagate_check_state_to_children(top, state)

    def select_siblings(self, tree):
        selected_items = tree.selectedItems()
        if not selected_items:
            return
        item = selected_items[0]
        parent = item.parent()
        if parent is not None:
            for i in range(parent.childCount()):
                sibling = parent.child(i)
                sibling.setCheckState(0, Qt.Checked)
                self.propagate_check_state_to_children(sibling, Qt.Checked)
        else:
            root = tree.invisibleRootItem()
            for i in range(root.childCount()):
                sibling = root.child(i)
                sibling.setCheckState(0, Qt.Checked)
                self.propagate_check_state_to_children(sibling, Qt.Checked)

    def apply_color_coding(self, tree):
        palette = [
            "#7BD3EA",
            "#A1EEBD",
            "#F6D6D6",
            "#F6F7C4",
            "#999B84",
            "#FFF6E3",
            "#F9C0AB",
            "#C1D8C3",
            "#E4C59E",
        ]

        def color_item(item, depth, parent_color=None):
            for offset in range(len(palette)):
                color_str = palette[(depth + offset) % len(palette)]
                if color_str != parent_color:
                    brush = QBrush(QColor(color_str))
                    item.setBackground(0, brush)
                    break
            for i in range(item.childCount()):
                child = item.child(i)
                current_color = item.background(0).color().name()
                color_item(child, depth + 1, current_color)

        for i in range(tree.topLevelItemCount()):
            top_item = tree.topLevelItem(i)
            color_item(top_item, 0, None)

    def on_options_changed(self, opts):
        self.app_controller.set_num_results(opts["num_results"])
        self.app_controller.set_detail_display_mode(opts["detail_display_mode"])
        self.app_controller.set_level_range(opts["min_level"], opts["max_level"])

    def on_campaign_text_changed(self):
        text = self.campaign_prompt_edit.toPlainText()
        self.app_controller.set_campaign_prompt(text)

    def on_system_text_changed(self, text):
        self.app_controller.set_system(text)

    def on_setting_text_changed(self, text):
        self.app_controller.set_setting(text)

    def generate_content(self):
        self.progress_dialog = QProgressDialog("Generating content...", "Cancel", 0, 0, self)
        self.progress_dialog.setWindowModality(Qt.WindowModal)
        self.progress_dialog.setAutoClose(False)
        self.progress_dialog.setAutoReset(False)
        self.progress_dialog.show()

        def on_finished(results):
            self.progress_dialog.close()
            self.app_controller.state.last_results = results
            self.results_view.display_results(results)
            if results:
                show_info(self, "Content generated successfully!")
            else:
                show_info(self, "No results generated.")

        def on_error(message):
            self.progress_dialog.close()
            show_error(self, message)

        self.app_controller.generate_content_async(on_finished, on_error)

    def export_detailed(self):
        self.app_controller.export_to_logs(detailed=True)
        show_info(self, "Detailed content exported successfully!")

    def export_results_triggered(self):
        self.app_controller.export_to_logs(detailed=False)
        show_info(self, "Table exported successfully!")

    def more_info_triggered(self):
        row = self.results_view.table.currentRow()
        if row < 0 or row >= len(self.results_view.results):
            show_error(self, "No item selected for detailed info.")
            return
        content = self.results_view.results[row]
        self.show_full_statblock(content)

    def show_full_statblock(self, base_content):
        statblock = self.app_controller.get_full_statblock(base_content)
        if not statblock:
            show_error(self, "Failed to retrieve full statblock.")
            return

        dlg = QDialog(self)
        dlg.setWindowTitle("Detailed Statblock")
        dlg.resize(300, 600)

        layout = QVBoxLayout(dlg)
        layout.setContentsMargins(5,5,5,5)
        layout.setSpacing(5)

        text = QTextEdit()
        text.setReadOnly(True)
        mode = self.app_controller.state.detail_display_mode
        name = statblock.get("Name", "")
        desc = statblock.get("Description", "")
        other_fields = [(k, v) for k, v in statblock.items() if k not in ["Name", "Description"]]

        if mode == "Plain Text":
            parts = [f"Name: {name}", f"Description: {desc}"]
            for k, v in other_fields:
                parts.append(f"{k}: {v}")
            text.setPlainText("\n".join(parts))
        elif mode == "Markdown":
            parts = [f"**{name}**", f"_{desc}_"]
            for k, v in other_fields:
                parts.append(f"**{k}:** {v}")
            md_text = "\n\n".join(parts)
            text.setPlainText(md_text)
        elif mode == "Formatted (3.5e Style)":
            template_path = "src/resources/statblock_template.html"
            try:
                with open(template_path, "r", encoding="utf-8") as f:
                    template = f.read()
            except Exception:
                template = "<h2>{{NAME}}</h2><p><i>{{DESCRIPTION}}</i></p>{{EXTRA_FIELDS}}"
            extra_html_parts = []
            for k, v in other_fields:
                extra_html_parts.append(f"<p><b>{k}:</b> {v}</p>")
            extra_fields_html = "\n".join(extra_html_parts)
            html = template.replace("{{NAME}}", name)
            html = html.replace("{{DESCRIPTION}}", desc)
            html = html.replace("{{EXTRA_FIELDS}}", extra_fields_html)
            text.setHtml(html)
        elif mode == "JSON Raw":
            raw_json = json.dumps(statblock, indent=2)
            text.setPlainText(raw_json)

        layout.addWidget(text)
        dlg.setLayout(layout)
        dlg.exec()

    def update_preview(self):
        row = self.results_view.table.currentRow()
        if row < 0 or row >= len(self.results_view.results):
            self.preview_box.clear()
            return
        result = self.results_view.results[row]
        keys = list(result.keys())
        preview_text = ""
        if keys:
            name_value = result.get('Name', '')
            description_value = result.get('Description', '')
            preview_text += f"<strong>Name:</strong> {name_value}<br />"
            preview_text += f"Description:<br /><br /><i>{description_value}</i><br /><br />"
            for key, value in result.items():
                if key in ["Name", "Description"]:
                    continue
                preview_text += f"<strong>{key}:</strong> <i>{value}</i><br />"

        self.preview_box.setHtml(preview_text)

    def update_category_breadcrumb(self, text):
        self.category_breadcrumb_content_label.setText(text)

    def update_context_breadcrumb(self, text):
        self.context_breadcrumb_content_label.setText(text)
</code>

./ui/category_selector.py
<code>
from PySide6.QtWidgets import QWidget, QHBoxLayout, QVBoxLayout, QLabel, QComboBox

class CategorySelector(QWidget):
    """
    CategorySelector displays two combo boxes: one for Category and one for Type.
    A placeholder is shown in Category to force the user to select a valid category.
    The Type combo is disabled until a valid category is chosen.

    Signals:
    - on_category_selected(category_or_none)
    - on_type_selected(type_or_none)
    """

    def __init__(self, categories, on_category_selected, on_type_selected, placeholder_text="Select a Category...", parent=None):
        super().__init__(parent)
        self.categories = categories
        self.on_category_selected = on_category_selected
        self.on_type_selected = on_type_selected
        self.placeholder_text = placeholder_text

        layout = QHBoxLayout()

        self.category_label = QLabel("Category:")
        self.category_combo = QComboBox()
        # Insert placeholder as the first item
        self.category_combo.addItem(self.placeholder_text)
        for c in self.categories.keys():
            self.category_combo.addItem(c)

        self.category_combo.currentTextChanged.connect(self.category_changed)

        self.type_label = QLabel("Type:")
        self.type_combo = QComboBox()
        self.type_combo.setEnabled(False)  # Disabled until a valid category is selected
        self.type_combo.currentTextChanged.connect(self.type_changed)

        layout.addWidget(self.category_label)
        layout.addWidget(self.category_combo)
        layout.addWidget(self.type_label)
        layout.addWidget(self.type_combo)

        self.setLayout(layout)

    def category_changed(self, category):
        """
        Called when the category combo changes.
        If placeholder is selected, disable type combo and notify None.
        Otherwise, populate the type combo and notify the selected category.
        """
        if category == self.placeholder_text:
            self.type_combo.clear()
            self.type_combo.setEnabled(False)
            self.on_category_selected(None)
            return

        self.on_category_selected(category)
        self.type_combo.clear()
        self.type_combo.setEnabled(True)
        # Populate type combo
        if category in self.categories:
            self.type_combo.addItem("Select a Type...")  # Add a placeholder for type
            for t in self.categories[category]:
                self.type_combo.addItem(t)
        else:
            # No valid types for this category?
            self.type_combo.setEnabled(False)

    def type_changed(self, t):
        """
        Called when the type combo changes.
        If 'Select a Type...' is selected, treat as None.
        """
        if t == "Select a Type...":
            self.on_type_selected(None)
        else:
            self.on_type_selected(t)
</code>

